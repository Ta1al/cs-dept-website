---
// Interactive Statistics Counter Island
interface Props {
	stats: Array<{
		number: string;
		label: string;
		suffix?: string;
		color?: string;
	}>;
	animationDelay?: number;
}

const { 
	stats = [], 
	animationDelay = 100 
} = Astro.props;
---

<div class="grid grid-cols-2 md:grid-cols-4 gap-8">
	{stats.map((stat, index) => (
		<div class="text-center" data-stat-index={index}>
			<div 
				class={`text-3xl md:text-4xl font-bold mb-2 ${stat.color || 'text-blue-400'} counter`}
				data-target={stat.number.replace(/\D/g, '')}
				data-suffix={stat.suffix || ''}
			>
				0{stat.suffix || ''}
			</div>
			<div class="text-gray-400 text-sm">{stat.label}</div>
		</div>
	))}
</div>

<script define:vars={{ animationDelay }}>
	class StatisticsCounter {
		constructor() {
			this.counters = document.querySelectorAll('.counter');
			this.animated = false;
			this.init();
		}

		init() {
			this.setupIntersectionObserver();
		}

		setupIntersectionObserver() {
			const observer = new IntersectionObserver((entries) => {
				entries.forEach(entry => {
					if (entry.isIntersecting && !this.animated) {
						this.animated = true;
						this.animateCounters();
					}
				});
			}, {
				threshold: 0.5,
				rootMargin: '0px 0px -100px 0px'
			});

			// Observe the parent container
			const container = this.counters[0]?.closest('[data-stat-index]')?.parentElement;
			if (container) {
				observer.observe(container);
			}
		}

		animateCounters() {
			this.counters.forEach((counter, index) => {
				setTimeout(() => {
					this.animateCounter(counter);
				}, index * animationDelay);
			});
		}

		animateCounter(counter) {
			const target = parseInt(counter.dataset.target);
			const suffix = counter.dataset.suffix || '';
			const duration = 2000; // 2 seconds
			const startTime = performance.now();

			const updateCounter = (currentTime) => {
				const elapsedTime = currentTime - startTime;
				const progress = Math.min(elapsedTime / duration, 1);

				// Easing function (ease-out cubic)
				const easeOut = 1 - Math.pow(1 - progress, 3);
				const currentValue = Math.floor(easeOut * target);

				counter.textContent = `${currentValue.toLocaleString()}${suffix}`;

				if (progress < 1) {
					requestAnimationFrame(updateCounter);
				}
			};

			requestAnimationFrame(updateCounter);
		}
	}

	// Initialize when DOM is ready
	if (document.readyState === 'loading') {
		document.addEventListener('DOMContentLoaded', () => new StatisticsCounter());
	} else {
		new StatisticsCounter();
	}
</script>
