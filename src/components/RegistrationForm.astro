---
export interface Props {
  eventTitle: string;
  eventId?: string;
  submitUrl?: string;
  gradientColors?: {
    from: string;
    to: string;
  };
  accentColor?: string;
  fields?: Array<{
    name: string;
    label: string;
    type: 'text' | 'email' | 'tel' | 'select' | 'textarea' | 'number';
    required?: boolean;
    placeholder?: string;
    options?: string[]; // for select fields
  }>;
}

const {
  eventTitle,
  eventId = '',
  submitUrl = 'https://example.com',
  gradientColors = { from: 'from-blue-500', to: 'to-purple-600' },
  accentColor = 'blue',
  fields = [
    { name: 'fullName', label: 'Full Name', type: 'text', required: true, placeholder: 'Enter your full name' },
    { name: 'email', label: 'Email Address', type: 'email', required: true, placeholder: 'Enter your email address' },
    { name: 'phone', label: 'Phone Number', type: 'tel', required: true, placeholder: 'Enter your phone number' },
    { name: 'studentId', label: 'Student ID', type: 'text', required: true, placeholder: 'Enter your student ID' },
    { name: 'gender', label: 'Gender', type: 'select', required: true, options: ['Male', 'Female'] },
    { name: 'year', label: 'Academic Year', type: 'select', required: false, options: ['First Year', 'Second Year', 'Third Year', 'Fourth Year', 'Graduate', 'Other'] },
    { name: 'experience', label: 'Relevant Experience', type: 'textarea', required: false, placeholder: 'Tell us about your relevant experience or expectations...' }
  ]
} = Astro.props;
---

<div class="bg-gradient-to-br from-gray-800/50 to-gray-900/50 rounded-2xl p-8 backdrop-blur-sm border border-gray-700">
  <div class="text-center mb-8">
    <h3 class="text-2xl md:text-3xl font-bold text-white mb-4">
      Register for <span class={`bg-gradient-to-r ${gradientColors.from} ${gradientColors.to} bg-clip-text text-transparent`}>{eventTitle}</span>
    </h3>
    <p class="text-gray-300">
      Fill out the form below to secure your spot at this event.
    </p>
  </div>

  <form class="registration-form" data-submit-url={submitUrl} data-event-id={eventId}>
    <div class="space-y-6">
      {fields.map((field) => (
        <div class="form-group">
          <label for={field.name} class="block text-sm font-medium text-gray-300 mb-2">
            {field.label}
            {field.required && <span class={`text-${accentColor}-400 ml-1`}>*</span>}
          </label>
          
          {field.type === 'textarea' ? (
            <textarea
              id={field.name}
              name={field.name}
              required={field.required}
              placeholder={field.placeholder}
              rows="4"
              class="w-full px-4 py-3 bg-gray-800/50 border border-gray-600 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent text-white placeholder-gray-400 transition-all duration-300 backdrop-blur-sm resize-none"
            ></textarea>
          ) : field.type === 'select' ? (
            <select
              id={field.name}
              name={field.name}
              required={field.required}
              class="w-full px-4 py-3 bg-gray-800/50 border border-gray-600 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent text-white transition-all duration-300 backdrop-blur-sm"
            >
              <option value="" disabled selected class="text-gray-400">
                {field.placeholder || `Select ${field.label.toLowerCase()}`}
              </option>
              {field.options?.map((option) => (
                <option value={option} class="text-white bg-gray-800">
                  {option}
                </option>
              ))}
            </select>
          ) : (
            <input
              type={field.type}
              id={field.name}
              name={field.name}
              required={field.required}
              placeholder={field.placeholder}
              class="w-full px-4 py-3 bg-gray-800/50 border border-gray-600 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent text-white placeholder-gray-400 transition-all duration-300 backdrop-blur-sm"
            />
          )}
        </div>
      ))}

      <!-- Terms and Conditions -->
      <div class="form-group">
        <div class="flex items-start space-x-3">
          <input
            type="checkbox"
            id="terms"
            name="terms"
            required
            class={`mt-1 h-4 w-4 text-${accentColor}-500 bg-gray-800 border-gray-600 rounded focus:ring-${accentColor}-500 focus:ring-2`}
          />
          <label for="terms" class="text-sm text-gray-300">
            I consent to data processing for event management purposes.
          </label>
        </div>
      </div>

      <!-- Submit Button -->
      <div class="pt-4">
        <button
          type="submit"
          class={`w-full bg-gradient-to-r ${gradientColors.from} ${gradientColors.to} hover:from-blue-600 hover:to-purple-700 text-white px-8 py-4 rounded-lg font-semibold transition-all duration-300 transform hover:scale-105 hover:shadow-lg flex items-center justify-center space-x-2`}
        >
          <span class="submit-text">Register Now</span>
          <svg class="w-5 h-5 submit-icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
          </svg>
          <!-- Loading spinner (hidden by default) -->
          <svg class="w-5 h-5 loading-spinner hidden animate-spin" fill="none" viewBox="0 0 24 24">
            <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
            <path class="opacity-75" fill="currentColor" d="m4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
          </svg>
        </button>
      </div>
    </div>

    <!-- Success/Error Messages -->
    <div class="form-messages mt-6 hidden">
      <div class="success-message hidden bg-green-500/10 border border-green-500/20 text-green-300 px-4 py-3 rounded-lg">
        <div class="flex items-center space-x-2">
          <svg class="w-5 h-5 flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
          </svg>
          <span>Registration successful! You will receive a confirmation email shortly.</span>
        </div>
      </div>
      
      <div class="error-message hidden bg-red-500/10 border border-red-500/20 text-red-300 px-4 py-3 rounded-lg">
        <div class="flex items-center space-x-2">
          <svg class="w-5 h-5 flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
          </svg>
          <span class="error-text">An error occurred. Please try again later.</span>
        </div>
      </div>
    </div>
  </form>
</div>

<script>
  class RegistrationForm {
    constructor(form: HTMLFormElement) {
      this.form = form;
      this.submitButton = form.querySelector('button[type="submit"]') as HTMLButtonElement;
      this.submitText = form.querySelector('.submit-text') as HTMLSpanElement;
      this.submitIcon = form.querySelector('.submit-icon') as SVGElement;
      this.loadingSpinner = form.querySelector('.loading-spinner') as SVGElement;
      this.messagesContainer = form.querySelector('.form-messages') as HTMLDivElement;
      this.successMessage = form.querySelector('.success-message') as HTMLDivElement;
      this.errorMessage = form.querySelector('.error-message') as HTMLDivElement;
      this.errorText = form.querySelector('.error-text') as HTMLSpanElement;
      
      this.init();
    }

    private form: HTMLFormElement;
    private submitButton: HTMLButtonElement;
    private submitText: HTMLSpanElement;
    private submitIcon: SVGElement;
    private loadingSpinner: SVGElement;
    private messagesContainer: HTMLDivElement;
    private successMessage: HTMLDivElement;
    private errorMessage: HTMLDivElement;
    private errorText: HTMLSpanElement;

    private init(): void {
      this.form.addEventListener('submit', this.handleSubmit.bind(this));
      
      // Add input validation styling
      const inputs = this.form.querySelectorAll('input, textarea, select');
      inputs.forEach(input => {
        input.addEventListener('blur', this.validateField.bind(this));
        input.addEventListener('input', this.clearFieldError.bind(this));
      });
    }

    private async handleSubmit(e: Event): Promise<void> {
      e.preventDefault();
      
      if (!this.validateForm()) return;

      this.setLoading(true);
      this.hideMessages();

      try {
        const formData = new FormData(this.form);
        const submitUrl = this.form.dataset.submitUrl || 'https://example.com';
        const eventId = this.form.dataset.eventId;

        // Add event ID to form data if provided
        if (eventId) {
          formData.append('eventId', eventId);
        }

        // Add timestamp
        formData.append('submittedAt', new Date().toISOString());

        const response = await fetch(submitUrl, {
          method: 'POST',
          body: formData,
          headers: {
            'Accept': 'application/json',
          },
        });

        if (response.ok) {
          this.showSuccess();
          this.form.reset();
        } else {
          const errorData = await response.json().catch(() => ({}));
          this.showError(errorData.message || 'Registration failed. Please try again.');
        }
      } catch (error) {
        console.error('Registration error:', error);
        this.showError('Network error. Please check your connection and try again.');
      } finally {
        this.setLoading(false);
      }
    }

    private validateForm(): boolean {
      const inputs = this.form.querySelectorAll('input[required], textarea[required], select[required]');
      let isValid = true;

      inputs.forEach(input => {
        if (!this.validateField({ target: input } as unknown as Event)) {
          isValid = false;
        }
      });

      return isValid;
    }

    private validateField(e: Event): boolean {
      const input = e.target as HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement;
      const value = input.value.trim();
      let isValid = true;
      let errorMessage = '';

      // Required field validation
      if (input.hasAttribute('required') && !value) {
        isValid = false;
        errorMessage = 'This field is required';
      }
      // Email validation
      else if (input.type === 'email' && value) {
        const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
        if (!emailRegex.test(value)) {
          isValid = false;
          errorMessage = 'Please enter a valid email address';
        }
      }
      // Phone validation
      else if (input.type === 'tel' && value) {
        const phoneRegex = /^[\+]?[0-9\s\-\(\)]{10,}$/;
        if (!phoneRegex.test(value)) {
          isValid = false;
          errorMessage = 'Please enter a valid phone number';
        }
      }

      this.setFieldError(input, isValid, errorMessage);
      return isValid;
    }

    private setFieldError(input: HTMLElement, isValid: boolean, errorMessage: string): void {
      const formGroup = input.closest('.form-group');
      if (!formGroup) return;

      // Remove existing error elements
      const existingError = formGroup.querySelector('.field-error');
      if (existingError) {
        existingError.remove();
      }

      if (isValid) {
        input.classList.remove('border-red-500', 'focus:ring-red-500');
        input.classList.add('border-gray-600', 'focus:ring-blue-500');
      } else {
        input.classList.remove('border-gray-600', 'focus:ring-blue-500');
        input.classList.add('border-red-500', 'focus:ring-red-500');
        
        // Add error message
        const errorDiv = document.createElement('div');
        errorDiv.className = 'field-error text-red-400 text-sm mt-1';
        errorDiv.textContent = errorMessage;
        formGroup.appendChild(errorDiv);
      }
    }

    private clearFieldError(e: Event): void {
      const input = e.target as HTMLElement;
      const formGroup = input.closest('.form-group');
      if (!formGroup) return;

      const errorDiv = formGroup.querySelector('.field-error');
      if (errorDiv) {
        errorDiv.remove();
        input.classList.remove('border-red-500', 'focus:ring-red-500');
        input.classList.add('border-gray-600', 'focus:ring-blue-500');
      }
    }

    private setLoading(loading: boolean): void {
      this.submitButton.disabled = loading;
      
      if (loading) {
        this.submitText.textContent = 'Registering...';
        this.submitIcon.classList.add('hidden');
        this.loadingSpinner.classList.remove('hidden');
        this.submitButton.classList.add('opacity-75', 'cursor-not-allowed');
      } else {
        this.submitText.textContent = 'Register Now';
        this.submitIcon.classList.remove('hidden');
        this.loadingSpinner.classList.add('hidden');
        this.submitButton.classList.remove('opacity-75', 'cursor-not-allowed');
      }
    }

    private showSuccess(): void {
      this.messagesContainer.classList.remove('hidden');
      this.successMessage.classList.remove('hidden');
      this.errorMessage.classList.add('hidden');
      
      // Scroll to message
      this.messagesContainer.scrollIntoView({ behavior: 'smooth', block: 'center' });
      
      // Auto hide after 10 seconds
      setTimeout(() => {
        this.hideMessages();
      }, 10000);
    }

    private showError(message: string): void {
      this.errorText.textContent = message;
      this.messagesContainer.classList.remove('hidden');
      this.errorMessage.classList.remove('hidden');
      this.successMessage.classList.add('hidden');
      
      // Scroll to message
      this.messagesContainer.scrollIntoView({ behavior: 'smooth', block: 'center' });
    }

    private hideMessages(): void {
      this.messagesContainer.classList.add('hidden');
      this.successMessage.classList.add('hidden');
      this.errorMessage.classList.add('hidden');
    }
  }

  // Initialize forms when DOM is loaded
  document.addEventListener('DOMContentLoaded', () => {
    const forms = document.querySelectorAll('.registration-form') as NodeListOf<HTMLFormElement>;
    forms.forEach(form => new RegistrationForm(form));
  });
</script>

<style>
  /* Custom styles for form elements */
  .registration-form input:focus,
  .registration-form textarea:focus,
  .registration-form select:focus {
    box-shadow: 0 0 0 2px rgba(59, 130, 246, 0.5);
  }

  .registration-form select {
    -webkit-appearance: none;
    -moz-appearance: none;
    appearance: none;
    background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' fill='none' viewBox='0 0 20 20'%3e%3cpath stroke='%236b7280' stroke-linecap='round' stroke-linejoin='round' stroke-width='1.5' d='m6 8 4 4 4-4'/%3e%3c/svg%3e");
    background-position: right 0.5rem center;
    background-repeat: no-repeat;
    background-size: 1.5em 1.5em;
    padding-right: 2.5rem;
  }

  /* Animation for form submission */
  @keyframes slideIn {
    from {
      opacity: 0;
      transform: translateY(-10px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  .form-messages > div:not(.hidden) {
    animation: slideIn 0.3s ease-out;
  }
</style>
