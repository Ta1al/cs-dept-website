---
// Component props interface
// Currently no props needed
---

<div class="resource-library">
  <!-- Search and Filter Controls -->
  <div
    class="bg-gray-900/50 border border-gray-800 rounded-xl p-4 md:p-6 backdrop-blur mb-8"
  >
    <div class="flex flex-col lg:flex-row gap-4">
      <!-- Search Bar -->
      <div class="flex-1">
        <div class="relative">
          <input
            type="text"
            id="search-input"
            placeholder="Search resources by title, course, or keywords..."
            class="w-full bg-gray-800/60 border border-gray-700 rounded-lg pl-10 pr-4 py-2.5 text-sm text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-blue-500"
          />
          <svg
            class="absolute left-3 top-3 w-4 h-4 text-gray-400"
            fill="none"
            stroke="currentColor"
            viewBox="0 0 24 24"
          >
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="2"
              d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
          </svg>
        </div>
      </div>

      <!-- Filters -->
      <div class="flex flex-wrap gap-3">
        <!-- Category Filter -->
        <select
          id="category-filter"
          class="bg-gray-800/60 border border-gray-700 rounded-lg px-3 py-2 text-sm text-white focus:outline-none focus:ring-2 focus:ring-blue-500"
        >
          <option value="all">All Categories</option>
          <option value="notes">Lecture Notes</option>
          <option value="past-papers">Past Papers</option>
          <option value="tutorials">Tutorials</option>
          <option value="assignments">Assignments</option>
          <option value="projects">Project Resources</option>
          <option value="books">Books & References</option>
        </select>

        <!-- Course Filter -->
        <select
          id="course-filter"
          class="bg-gray-800/60 border border-gray-700 rounded-lg px-3 py-2 text-sm text-white focus:outline-none focus:ring-2 focus:ring-blue-500"
        >
          <option value="all">All Courses</option>
          <option value="cs101">CS101 - Intro to Programming</option>
          <option value="cs201">CS201 - Data Structures</option>
          <option value="cs301">CS301 - Algorithms</option>
          <option value="cs302">CS302 - Database Systems</option>
          <option value="cs401">CS401 - Operating Systems</option>
          <option value="cs402">CS402 - Computer Networks</option>
          <option value="cs403">CS403 - Software Engineering</option>
          <option value="cs404">CS404 - Machine Learning</option>
        </select>

        <!-- Sort Options -->
        <select
          id="sort-filter"
          class="bg-gray-800/60 border border-gray-700 rounded-lg px-3 py-2 text-sm text-white focus:outline-none focus:ring-2 focus:ring-blue-500"
        >
          <option value="recent">Most Recent</option>
          <option value="popular">Most Popular</option>
          <option value="rating">Highest Rated</option>
          <option value="downloads">Most Downloaded</option>
        </select>
      </div>
    </div>

    <!-- Active Filters Display -->
    <div id="active-filters" class="flex flex-wrap gap-2 mt-4 hidden">
      <!-- Filter tags will be inserted here -->
    </div>
  </div>

  <!-- Upload/Contribute Section -->
  <div class="mb-8">
    <button
      id="contribute-btn"
      class="inline-flex items-center gap-2 px-4 py-2.5 bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-500 hover:to-purple-500 text-white font-medium rounded-lg transition-all shadow-lg hover:shadow-xl"
    >
      <svg
        class="w-5 h-5"
        fill="none"
        stroke="currentColor"
        viewBox="0 0 24 24"
      >
        <path
          stroke-linecap="round"
          stroke-linejoin="round"
          stroke-width="2"
          d="M12 4v16m8-8H4"></path>
      </svg>
      Contribute Resource
    </button>
  </div>

  <!-- Resources Grid -->
  <div
    class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 mb-8"
    id="resources-grid"
  >
    <!-- Resource cards will be dynamically inserted here -->
  </div>

  <!-- Loading State -->
  <div id="loading-state" class="hidden text-center py-12">
    <div
      class="inline-block animate-spin rounded-full h-12 w-12 border-b-2 border-blue-500"
    >
    </div>
    <p class="text-gray-400 mt-4">Loading resources...</p>
  </div>

  <!-- Empty State -->
  <div
    id="empty-state"
    class="hidden text-center py-12 bg-gray-900/30 rounded-xl border border-gray-800"
  >
    <svg
      class="w-16 h-16 text-gray-600 mx-auto mb-4"
      fill="none"
      stroke="currentColor"
      viewBox="0 0 24 24"
    >
      <path
        stroke-linecap="round"
        stroke-linejoin="round"
        stroke-width="1.5"
        d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"
      ></path>
    </svg>
    <h3 class="text-lg font-semibold text-white mb-2">No resources found</h3>
    <p class="text-gray-400 text-sm mb-4">
      Try adjusting your filters or search criteria
    </p>
    <button
      id="clear-filters-btn"
      class="text-blue-400 hover:text-blue-300 text-sm font-medium"
      >Clear all filters</button
    >
  </div>

  <!-- Pagination -->
  <div id="pagination" class="flex justify-center items-center gap-2 mt-8">
    <!-- Pagination buttons will be inserted here -->
  </div>
</div>

<!-- Upload Modal -->
<div id="upload-modal" class="fixed inset-0 z-50 hidden">
  <div class="fixed inset-0 bg-black/60 backdrop-blur-sm" id="modal-backdrop">
  </div>
  <div class="fixed inset-0 overflow-y-auto">
    <div class="flex min-h-full items-center justify-center p-4">
      <div
        class="relative bg-gray-900 rounded-2xl border border-gray-800 w-full max-w-2xl p-6 shadow-2xl"
      >
        <h2 class="text-2xl font-bold text-white mb-6">
          Contribute a Resource
        </h2>

        <form id="upload-form" class="space-y-4">
          <!-- Title -->
          <div>
            <label
              for="resource-title"
              class="block text-sm font-medium text-gray-300 mb-1"
              >Title *</label
            >
            <input
              type="text"
              id="resource-title"
              required
              class="w-full bg-gray-800/60 border border-gray-700 rounded-lg px-3 py-2 text-white focus:outline-none focus:ring-2 focus:ring-blue-500"
            />
          </div>

          <!-- Course Selection -->
          <div>
            <label
              for="resource-course"
              class="block text-sm font-medium text-gray-300 mb-1"
              >Course *</label
            >
            <select
              id="resource-course"
              required
              class="w-full bg-gray-800/60 border border-gray-700 rounded-lg px-3 py-2 text-white focus:outline-none focus:ring-2 focus:ring-blue-500"
            >
              <option value="">Select a course</option>
              <option value="cs101">CS101 - Intro to Programming</option>
              <option value="cs201">CS201 - Data Structures</option>
              <option value="cs301">CS301 - Algorithms</option>
              <option value="cs302">CS302 - Database Systems</option>
              <option value="cs401">CS401 - Operating Systems</option>
              <option value="cs402">CS402 - Computer Networks</option>
              <option value="cs403">CS403 - Software Engineering</option>
              <option value="cs404">CS404 - Machine Learning</option>
            </select>
          </div>

          <!-- Category -->
          <div>
            <label
              for="resource-category"
              class="block text-sm font-medium text-gray-300 mb-1"
              >Category *</label
            >
            <select
              id="resource-category"
              required
              class="w-full bg-gray-800/60 border border-gray-700 rounded-lg px-3 py-2 text-white focus:outline-none focus:ring-2 focus:ring-blue-500"
            >
              <option value="">Select a category</option>
              <option value="notes">Lecture Notes</option>
              <option value="past-papers">Past Papers</option>
              <option value="tutorials">Tutorials</option>
              <option value="assignments">Assignments</option>
              <option value="projects">Project Resources</option>
              <option value="books">Books & References</option>
            </select>
          </div>

          <!-- Description -->
          <div>
            <label
              for="resource-description"
              class="block text-sm font-medium text-gray-300 mb-1"
              >Description</label
            >
            <textarea
              id="resource-description"
              rows="3"
              class="w-full bg-gray-800/60 border border-gray-700 rounded-lg px-3 py-2 text-white focus:outline-none focus:ring-2 focus:ring-blue-500"
            ></textarea>
          </div>

          <!-- File Upload -->
          <div>
            <label class="block text-sm font-medium text-gray-300 mb-1"
              >File *</label
            >
            <div
              id="file-drop-zone"
              class="border-2 border-dashed border-gray-700 rounded-lg p-8 text-center hover:border-blue-500 transition-colors cursor-pointer"
            >
              <svg
                class="w-12 h-12 text-gray-500 mx-auto mb-3"
                fill="none"
                stroke="currentColor"
                viewBox="0 0 24 24"
              >
                <path
                  stroke-linecap="round"
                  stroke-linejoin="round"
                  stroke-width="1.5"
                  d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M15 13l-3-3m0 0l-3 3m3-3v12"
                ></path>
              </svg>
              <p class="text-gray-400 mb-2">
                Drop file here or click to browse
              </p>
              <p class="text-xs text-gray-500">
                PDF, DOC, DOCX, PPT, PPTX, ZIP (Max 50MB)
              </p>
              <input
                type="file"
                id="file-input"
                class="hidden"
                accept=".pdf,.doc,.docx,.ppt,.pptx,.zip"
              />
            </div>
            <div
              id="file-preview"
              class="hidden mt-3 p-3 bg-gray-800/40 rounded-lg flex items-center justify-between"
            >
              <span id="file-name" class="text-sm text-gray-300"></span>
              <button
                type="button"
                id="remove-file"
                class="text-red-400 hover:text-red-300"
              >
                <svg
                  class="w-5 h-5"
                  fill="none"
                  stroke="currentColor"
                  viewBox="0 0 24 24"
                >
                  <path
                    stroke-linecap="round"
                    stroke-linejoin="round"
                    stroke-width="2"
                    d="M6 18L18 6M6 6l12 12"></path>
                </svg>
              </button>
            </div>
          </div>

          <!-- Tags -->
          <div>
            <label
              for="resource-tags"
              class="block text-sm font-medium text-gray-300 mb-1"
              >Tags (comma-separated)</label
            >
            <input
              type="text"
              id="resource-tags"
              placeholder="e.g., midterm, final, lecture-10, algorithm"
              class="w-full bg-gray-800/60 border border-gray-700 rounded-lg px-3 py-2 text-white focus:outline-none focus:ring-2 focus:ring-blue-500"
            />
          </div>

          <!-- Buttons -->
          <div class="flex gap-3 pt-4">
            <button
              type="submit"
              class="flex-1 px-4 py-2.5 bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-500 hover:to-purple-500 text-white font-medium rounded-lg transition-all"
            >
              Upload Resource
            </button>
            <button
              type="button"
              id="cancel-upload"
              class="flex-1 px-4 py-2.5 bg-gray-800 hover:bg-gray-700 text-white font-medium rounded-lg transition-colors"
            >
              Cancel
            </button>
          </div>
        </form>
      </div>
    </div>
  </div>
</div>

<!-- Resource Detail Modal -->
<div id="detail-modal" class="fixed inset-0 z-50 hidden">
  <div class="fixed inset-0 bg-black/60 backdrop-blur-sm" id="detail-backdrop">
  </div>
  <div class="fixed inset-0 overflow-y-auto">
    <div class="flex min-h-full items-center justify-center p-4">
      <div
        class="relative bg-gray-900 rounded-2xl border border-gray-800 w-full max-w-3xl p-6 shadow-2xl"
      >
        <button
          id="close-detail"
          class="absolute top-4 right-4 text-gray-400 hover:text-white"
        >
          <svg
            class="w-6 h-6"
            fill="none"
            stroke="currentColor"
            viewBox="0 0 24 24"
          >
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="2"
              d="M6 18L18 6M6 6l12 12"></path>
          </svg>
        </button>
        <div id="detail-content">
          <!-- Resource details will be inserted here -->
        </div>
      </div>
    </div>
  </div>
</div>

<script>
  import {
    resourceManager,
    type Resource,
    type ResourceFilter,
  } from '../utils/resourceManager';

  let currentPage = 1;
  const itemsPerPage = 9;
  let currentFilter: ResourceFilter = {};
  let allResources: Resource[] = [];

  // Initialize
  document.addEventListener('DOMContentLoaded', async () => {
    await loadResources();
    setupEventListeners();
  });

  async function loadResources() {
    const loadingEl = document.getElementById('loading-state');
    const gridEl = document.getElementById('resources-grid');
    const emptyEl = document.getElementById('empty-state');

    if (loadingEl) loadingEl.classList.remove('hidden');
    if (gridEl) gridEl.classList.add('hidden');
    if (emptyEl) emptyEl.classList.add('hidden');

    try {
      // Simulate API call - in production, this would fetch from a backend
      allResources = await resourceManager.getResources(currentFilter);
      renderResources();
    } catch (error) {
      console.error('Failed to load resources:', error);
    } finally {
      if (loadingEl) loadingEl.classList.add('hidden');
    }
  }

  function renderResources() {
    const gridEl = document.getElementById('resources-grid');
    const emptyEl = document.getElementById('empty-state');
    const paginationEl = document.getElementById('pagination');

    if (!gridEl) return;

    // Apply filters
    const filteredResources = resourceManager.filterResources(
      allResources,
      currentFilter
    );

    // Pagination
    const totalPages = Math.ceil(filteredResources.length / itemsPerPage);
    const startIdx = (currentPage - 1) * itemsPerPage;
    const paginatedResources = filteredResources.slice(
      startIdx,
      startIdx + itemsPerPage
    );

    if (paginatedResources.length === 0) {
      gridEl.classList.add('hidden');
      if (emptyEl) emptyEl.classList.remove('hidden');
      if (paginationEl) paginationEl.classList.add('hidden');
      return;
    }

    gridEl.classList.remove('hidden');
    if (emptyEl) emptyEl.classList.add('hidden');
    gridEl.innerHTML = paginatedResources
      .map((resource) => createResourceCard(resource))
      .join('');

    // Render pagination
    if (paginationEl && totalPages > 1) {
      paginationEl.classList.remove('hidden');
      renderPagination(totalPages);
    } else if (paginationEl) {
      paginationEl.classList.add('hidden');
    }

    // Attach card event listeners
    attachCardListeners();
  }

  function createResourceCard(resource: Resource): string {
    const categoryColors: Record<string, string> = {
      notes: 'bg-blue-500/20 text-blue-400 border-blue-500/30',
      'past-papers': 'bg-purple-500/20 text-purple-400 border-purple-500/30',
      tutorials: 'bg-green-500/20 text-green-400 border-green-500/30',
      assignments: 'bg-orange-500/20 text-orange-400 border-orange-500/30',
      projects: 'bg-pink-500/20 text-pink-400 border-pink-500/30',
      books: 'bg-indigo-500/20 text-indigo-400 border-indigo-500/30',
    };

    const categoryStyle =
      categoryColors[resource.category] ||
      'bg-gray-500/20 text-gray-400 border-gray-500/30';

    return `
			<div class="resource-card bg-gray-900/60 border border-gray-800 rounded-xl p-5 hover:border-blue-500/50 transition-all cursor-pointer group" data-resource-id="${resource.id}">
				<div class="flex items-start justify-between mb-3">
					<span class="inline-flex px-2.5 py-1 rounded-full text-xs font-medium ${categoryStyle} border">
						${resource.category.replace('-', ' ').replace(/\b\w/g, (l) => l.toUpperCase())}
					</span>
					<div class="flex items-center gap-1">
						<svg class="w-4 h-4 text-yellow-400" fill="currentColor" viewBox="0 0 20 20">
							<path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z"/>
						</svg>
						<span class="text-sm text-gray-300">${resource.rating.toFixed(1)}</span>
					</div>
				</div>

				<h3 class="text-lg font-semibold text-white mb-2 group-hover:text-blue-400 transition-colors line-clamp-2">
					${resource.title}
				</h3>

				<p class="text-sm text-gray-400 mb-3 line-clamp-2">${resource.description || 'No description available'}</p>

				<div class="flex items-center justify-between text-xs text-gray-500">
					<span>${resource.courseId.toUpperCase()}</span>
					<span>${resource.downloads} downloads</span>
				</div>

				<div class="mt-3 pt-3 border-t border-gray-800 flex items-center justify-between">
					<div class="flex items-center gap-2">
						<div class="w-6 h-6 rounded-full bg-gradient-to-r from-blue-400 to-purple-600"></div>
						<span class="text-xs text-gray-400">${resource.uploadedBy}</span>
					</div>
					<span class="text-xs text-gray-500">${new Date(resource.uploadDate).toLocaleDateString()}</span>
				</div>
			</div>
		`;
  }

  function renderPagination(totalPages: number) {
    const paginationEl = document.getElementById('pagination');
    if (!paginationEl) return;

    let html = '';

    // Previous button
    html += `<button class="pagination-btn px-3 py-1 rounded-lg ${
      currentPage === 1
        ? 'bg-gray-800/30 text-gray-600 cursor-not-allowed'
        : 'bg-gray-800 text-gray-300 hover:bg-gray-700'
    }" ${currentPage === 1 ? 'disabled' : ''} data-page="${currentPage - 1}">Previous</button>`;

    // Page numbers
    for (let i = 1; i <= totalPages; i++) {
      if (
        i === 1 ||
        i === totalPages ||
        (i >= currentPage - 1 && i <= currentPage + 1)
      ) {
        html += `<button class="pagination-btn px-3 py-1 rounded-lg ${
          i === currentPage
            ? 'bg-blue-600 text-white'
            : 'bg-gray-800 text-gray-300 hover:bg-gray-700'
        }" data-page="${i}">${i}</button>`;
      } else if (i === currentPage - 2 || i === currentPage + 2) {
        html += `<span class="text-gray-500">...</span>`;
      }
    }

    // Next button
    html += `<button class="pagination-btn px-3 py-1 rounded-lg ${
      currentPage === totalPages
        ? 'bg-gray-800/30 text-gray-600 cursor-not-allowed'
        : 'bg-gray-800 text-gray-300 hover:bg-gray-700'
    }" ${currentPage === totalPages ? 'disabled' : ''} data-page="${currentPage + 1}">Next</button>`;

    paginationEl.innerHTML = html;

    // Add event listeners
    paginationEl.querySelectorAll('.pagination-btn').forEach((btn) => {
      btn.addEventListener('click', (e) => {
        const target = e.target as HTMLElement;
        const page = parseInt(target.dataset.page || '1');
        if (page !== currentPage && page >= 1 && page <= totalPages) {
          currentPage = page;
          renderResources();
          window.scrollTo({ top: 0, behavior: 'smooth' });
        }
      });
    });
  }

  function setupEventListeners() {
    // Search
    const searchInput = document.getElementById(
      'search-input'
    ) as HTMLInputElement;
    if (searchInput) {
      searchInput.addEventListener(
        'input',
        debounce(() => {
          currentFilter.searchTerm = searchInput.value;
          currentPage = 1;
          renderResources();
        }, 300)
      );
    }

    // Filters
    const categoryFilter = document.getElementById(
      'category-filter'
    ) as HTMLSelectElement;
    const courseFilter = document.getElementById(
      'course-filter'
    ) as HTMLSelectElement;
    const sortFilter = document.getElementById(
      'sort-filter'
    ) as HTMLSelectElement;

    if (categoryFilter) {
      categoryFilter.addEventListener('change', () => {
        currentFilter.category =
          categoryFilter.value === 'all' ? undefined : categoryFilter.value;
        currentPage = 1;
        renderResources();
      });
    }

    if (courseFilter) {
      courseFilter.addEventListener('change', () => {
        currentFilter.courseId =
          courseFilter.value === 'all' ? undefined : courseFilter.value;
        currentPage = 1;
        renderResources();
      });
    }

    if (sortFilter) {
      sortFilter.addEventListener('change', () => {
        currentFilter.sortBy = sortFilter.value as import('../utils/resourceManager').ResourceFilter['sortBy'];
        renderResources();
      });
    }

    // Clear filters
    const clearFiltersBtn = document.getElementById('clear-filters-btn');
    if (clearFiltersBtn) {
      clearFiltersBtn.addEventListener('click', () => {
        currentFilter = {};
        currentPage = 1;
        if (searchInput) searchInput.value = '';
        if (categoryFilter) categoryFilter.value = 'all';
        if (courseFilter) courseFilter.value = 'all';
        if (sortFilter) sortFilter.value = 'recent';
        renderResources();
      });
    }

    // Upload modal
    setupUploadModal();
  }

  function setupUploadModal() {
    const contributeBtn = document.getElementById('contribute-btn');
    const uploadModal = document.getElementById('upload-modal');
    const modalBackdrop = document.getElementById('modal-backdrop');
    const cancelUpload = document.getElementById('cancel-upload');
    const uploadForm = document.getElementById(
      'upload-form'
    ) as HTMLFormElement;
    const fileDropZone = document.getElementById('file-drop-zone');
    const fileInput = document.getElementById('file-input') as HTMLInputElement;
    const filePreview = document.getElementById('file-preview');
    const fileName = document.getElementById('file-name');
    const removeFile = document.getElementById('remove-file');

    let selectedFile: File | null = null;

    // Open modal
    if (contributeBtn && uploadModal) {
      contributeBtn.addEventListener('click', () => {
        uploadModal.classList.remove('hidden');
      });
    }

    // Close modal
    function closeModal() {
      if (uploadModal) uploadModal.classList.add('hidden');
      if (uploadForm) uploadForm.reset();
      selectedFile = null;
      if (filePreview) filePreview.classList.add('hidden');
    }

    if (modalBackdrop) modalBackdrop.addEventListener('click', closeModal);
    if (cancelUpload) cancelUpload.addEventListener('click', closeModal);

    // File handling
    if (fileDropZone && fileInput) {
      fileDropZone.addEventListener('click', () => fileInput.click());

      fileDropZone.addEventListener('dragover', (e) => {
        e.preventDefault();
        fileDropZone.classList.add('border-blue-500', 'bg-blue-500/10');
      });

      fileDropZone.addEventListener('dragleave', () => {
        fileDropZone.classList.remove('border-blue-500', 'bg-blue-500/10');
      });

      fileDropZone.addEventListener('drop', (e) => {
        e.preventDefault();
        fileDropZone.classList.remove('border-blue-500', 'bg-blue-500/10');
        const files = e.dataTransfer?.files;
        if (files && files[0]) {
          handleFileSelect(files[0]);
        }
      });

      fileInput.addEventListener('change', (e) => {
        const target = e.target as HTMLInputElement;
        if (target.files && target.files[0]) {
          handleFileSelect(target.files[0]);
        }
      });
    }

    function handleFileSelect(file: File) {
      selectedFile = file;
      if (fileName) fileName.textContent = file.name;
      if (filePreview) filePreview.classList.remove('hidden');
    }

    if (removeFile) {
      removeFile.addEventListener('click', () => {
        selectedFile = null;
        if (fileInput) fileInput.value = '';
        if (filePreview) filePreview.classList.add('hidden');
      });
    }

    // Form submission
    if (uploadForm) {
      uploadForm.addEventListener('submit', async (e) => {
        e.preventDefault();

        if (!selectedFile) {
          alert('Please select a file to upload');
          return;
        }

        // In production, this would upload to a backend
        const formData = new FormData(uploadForm);
        formData.append('file', selectedFile);

        // Simulate upload
        console.log('Uploading resource:', {
          title: (document.getElementById('resource-title') as HTMLInputElement)
            ?.value,
          course: (
            document.getElementById('resource-course') as HTMLSelectElement
          )?.value,
          category: (
            document.getElementById('resource-category') as HTMLSelectElement
          )?.value,
          description: (
            document.getElementById(
              'resource-description'
            ) as HTMLTextAreaElement
          )?.value,
          tags: (document.getElementById('resource-tags') as HTMLInputElement)
            ?.value,
          file: selectedFile.name,
        });

        // Show success message
        alert('Resource uploaded successfully! (Demo mode - no actual upload)');
        closeModal();

        // Reload resources
        await loadResources();
      });
    }
  }

  function attachCardListeners() {
    document.querySelectorAll('.resource-card').forEach((card) => {
      card.addEventListener('click', (e) => {
        const target = e.currentTarget as HTMLElement;
        const resourceId = target.dataset.resourceId;
        if (resourceId) {
          showResourceDetail(resourceId);
        }
      });
    });
  }

  function showResourceDetail(resourceId: string) {
    const resource = allResources.find((r) => r.id === resourceId);
    if (!resource) return;

    const detailModal = document.getElementById('detail-modal');
    const detailContent = document.getElementById('detail-content');

    if (detailModal && detailContent) {
      detailContent.innerHTML = `
				<div class="mb-6">
					<h2 class="text-2xl font-bold text-white mb-2">${resource.title}</h2>
					<div class="flex items-center gap-4 text-sm text-gray-400">
						<span>${resource.courseId.toUpperCase()}</span>
						<span>•</span>
						<span>${resource.category.replace('-', ' ').replace(/\b\w/g, (l) => l.toUpperCase())}</span>
						<span>•</span>
						<span>Uploaded by ${resource.uploadedBy}</span>
					</div>
				</div>

				<div class="bg-gray-800/40 rounded-lg p-4 mb-6">
					<p class="text-gray-300">${resource.description || 'No description available'}</p>
				</div>

				<div class="grid grid-cols-2 gap-4 mb-6">
					<div class="bg-gray-800/40 rounded-lg p-4">
						<div class="flex items-center gap-2 mb-2">
							<svg class="w-5 h-5 text-yellow-400" fill="currentColor" viewBox="0 0 20 20">
								<path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z"/>
							</svg>
							<span class="text-lg font-semibold text-white">${resource.rating.toFixed(1)}</span>
						</div>
						<p class="text-sm text-gray-400">${resource.reviews} reviews</p>
					</div>
					<div class="bg-gray-800/40 rounded-lg p-4">
						<div class="flex items-center gap-2 mb-2">
							<svg class="w-5 h-5 text-blue-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
								<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M9 19l3 3m0 0l3-3m-3 3V10"/>
							</svg>
							<span class="text-lg font-semibold text-white">${resource.downloads}</span>
						</div>
						<p class="text-sm text-gray-400">downloads</p>
					</div>
				</div>

				<div class="flex gap-3">
					<button onclick="window.resourceManager.downloadResource('${resource.id}')" class="flex-1 px-4 py-2.5 bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-500 hover:to-purple-500 text-white font-medium rounded-lg transition-all flex items-center justify-center gap-2">
						<svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
							<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M9 19l3 3m0 0l3-3m-3 3V10"/>
						</svg>
						Download Resource
					</button>
					<button onclick="document.getElementById('detail-modal').classList.add('hidden')" class="px-4 py-2.5 bg-gray-800 hover:bg-gray-700 text-white font-medium rounded-lg transition-colors">
						Close
					</button>
				</div>
			`;

      detailModal.classList.remove('hidden');
    }
  }

  // Close detail modal
  const detailBackdrop = document.getElementById('detail-backdrop');
  const closeDetail = document.getElementById('close-detail');

  if (detailBackdrop) {
    detailBackdrop.addEventListener('click', () => {
      const detailModal = document.getElementById('detail-modal');
      if (detailModal) detailModal.classList.add('hidden');
    });
  }

  if (closeDetail) {
    closeDetail.addEventListener('click', () => {
      const detailModal = document.getElementById('detail-modal');
      if (detailModal) detailModal.classList.add('hidden');
    });
  }

  // Utility function
  function debounce(func: Function, wait: number) {
    let timeout: ReturnType<typeof setTimeout>;
    return function executedFunction(...args: unknown[]) {
      const later = () => {
        clearTimeout(timeout);
        func(...args);
      };
      clearTimeout(timeout);
      timeout = setTimeout(later, wait);
    };
  }

  // Make resourceManager available globally for onclick handlers
  (window as unknown as Record<string, unknown>).resourceManager = resourceManager;
</script>

<style>
  .line-clamp-2 {
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }

  .resource-card {
    transition: all 0.3s ease;
  }

  .resource-card:hover {
    transform: translateY(-2px);
    box-shadow: 0 10px 30px -10px rgba(0, 0, 0, 0.5);
  }
</style>
