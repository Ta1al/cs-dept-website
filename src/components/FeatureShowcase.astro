---
// Interactive Feature Showcase Island
interface Props {
	features?: Array<{
		icon: string;
		title: string;
		description: string;
		details: string;
	}>;
}

const defaultFeatures = [
	{
		icon: 'üéì',
		title: 'Academic Excellence',
		description: 'Top-tier computer science education',
		details: 'Our rigorous curriculum covers fundamental and advanced topics in computer science, ensuring graduates are well-prepared for industry challenges.'
	},
	{
		icon: 'üî¨',
		title: 'Research Innovation',
		description: 'Cutting-edge research in AI, ML, and more',
		details: 'Our faculty and students conduct groundbreaking research in artificial intelligence, machine learning, cybersecurity, and emerging technologies.'
	},
	{
		icon: 'üè¢',
		title: 'Industry Connections',
		description: 'Strong partnerships with tech companies',
		details: 'We maintain active relationships with leading tech companies, providing internship opportunities and career placement for our students.'
	},
	{
		icon: 'üåü',
		title: 'Student Success',
		description: 'Exceptional graduate outcomes',
		details: 'Our graduates consistently achieve success in top tech companies, graduate programs, and as entrepreneurs in the technology sector.'
	}
];

const { features = defaultFeatures } = Astro.props;
---

<div id="feature-showcase" class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
	{features.map((feature, index) => (
		<div 
			class="feature-card bg-gradient-to-br from-gray-800/50 to-gray-900/50 backdrop-blur-sm border border-gray-700 rounded-2xl p-6 cursor-pointer transform transition-all duration-300 hover:scale-105 hover:border-blue-500/50"
			data-feature={JSON.stringify(feature)}
			data-index={index}
		>
			<div class="text-4xl mb-4">{feature.icon}</div>
			<h3 class="text-xl font-bold text-white mb-3">{feature.title}</h3>
			<p class="text-gray-400 text-sm">{feature.description}</p>
			<div class="mt-4 text-blue-400 text-sm font-medium flex items-center group">
				Learn more 
				<svg class="w-4 h-4 ml-1 transform transition-transform group-hover:translate-x-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
					<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
				</svg>
			</div>
		</div>
	))}
</div>

<!-- Modal for detailed view -->
<div id="feature-modal" class="fixed inset-0 bg-black/50 backdrop-blur-sm z-50 hidden flex items-center justify-center p-4">
	<div class="bg-gray-800 rounded-2xl max-w-2xl w-full p-8 relative transform transition-all duration-300 scale-95">
		<button id="close-modal" class="absolute top-4 right-4 text-gray-400 hover:text-white text-2xl">
			√ó
		</button>
		<div id="modal-content">
			<!-- Dynamic content will be inserted here -->
		</div>
	</div>
</div>

<script type="module">
	class FeatureShowcase {
		constructor() {
			this.modal = document.getElementById('feature-modal');
			this.modalContent = document.getElementById('modal-content');
			this.closeButton = document.getElementById('close-modal');
			this.init();
		}

		init() {
			// Add click handlers to feature cards
			const cards = document.querySelectorAll('.feature-card');
			cards.forEach(card => {
				card.addEventListener('click', this.handleFeatureClick.bind(this));
			});

			// Modal close handlers
			if (this.closeButton) {
				this.closeButton.addEventListener('click', this.closeModal.bind(this));
			}
			
			if (this.modal) {
				this.modal.addEventListener('click', (e) => {
					if (e.target === this.modal) {
						this.closeModal();
					}
				});
			}

			// Escape key to close modal
			document.addEventListener('keydown', (e) => {
				if (e.key === 'Escape' && this.modal && !this.modal.classList.contains('hidden')) {
					this.closeModal();
				}
			});

			// Add staggered entrance animation
			this.animateCards();
		}

		handleFeatureClick(e) {
			const target = e.currentTarget;
			const featureData = target.dataset.feature;
			if (featureData) {
				try {
					const feature = JSON.parse(featureData);
					this.showModal(feature);
				} catch (error) {
					console.error('Error parsing feature data:', error);
				}
			}
		}

		showModal(feature) {
			if (!this.modalContent || !this.modal) return;

			this.modalContent.innerHTML = `
				<div class="text-center mb-6">
					<div class="text-6xl mb-4">${feature.icon}</div>
					<h2 class="text-3xl font-bold text-white mb-2">${feature.title}</h2>
					<p class="text-blue-400 text-lg">${feature.description}</p>
				</div>
				<div class="text-gray-300 leading-relaxed">
					<p>${feature.details}</p>
				</div>
				<div class="mt-8 flex justify-center">
					<button class="bg-gradient-to-r from-blue-500 to-purple-600 hover:from-blue-600 hover:to-purple-700 px-6 py-3 rounded-lg font-semibold transition-all duration-300 transform hover:scale-105">
						Explore Further
					</button>
				</div>
			`;

			this.modal.classList.remove('hidden');
			setTimeout(() => {
				const modalDialog = this.modal.querySelector('.bg-gray-800');
				if (modalDialog) {
					modalDialog.classList.remove('scale-95');
					modalDialog.classList.add('scale-100');
				}
			}, 10);

			// Prevent body scrolling
			document.body.style.overflow = 'hidden';
		}

		closeModal() {
			if (!this.modal) return;

			const modalDialog = this.modal.querySelector('.bg-gray-800');
			if (modalDialog) {
				modalDialog.classList.add('scale-95');
				modalDialog.classList.remove('scale-100');
			}

			setTimeout(() => {
				if (this.modal) {
					this.modal.classList.add('hidden');
				}
				document.body.style.overflow = 'unset';
			}, 300);
		}

		animateCards() {
			const cards = document.querySelectorAll('.feature-card');
			cards.forEach((card, index) => {
				card.style.opacity = '0';
				card.style.transform = 'translateY(20px)';
				card.style.transition = 'opacity 0.6s ease, transform 0.6s ease';

				setTimeout(() => {
					card.style.opacity = '1';
					card.style.transform = 'translateY(0)';
				}, index * 100);
			});
		}
	}

	// Initialize the feature showcase
	const initFeatureShowcase = () => {
		new FeatureShowcase();
	};

	// Initialize when DOM is loaded
	if (document.readyState === 'loading') {
		document.addEventListener('DOMContentLoaded', initFeatureShowcase);
	} else {
		initFeatureShowcase();
	}
</script>
