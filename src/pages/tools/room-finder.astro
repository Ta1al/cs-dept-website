---
import Layout from '../../layouts/Layout.astro';
import Header from '../../components/Header.astro';
import Footer from '../../components/Footer.astro';
import '../../styles/global.css';
import '../../styles/room-finder.css';
import fs from 'node:fs';
// Reuse timetable dataset discovery (server-side)
const parsedDir = new URL('../../../public/parsed/', import.meta.url);
let datasetFiles: string[] = [];
let defaultDataset: string | null = null;
try {
	datasetFiles = fs
		.readdirSync(parsedDir)
		.filter((f) => f.endsWith('.json'))
		.sort();
	const weekPattern = /^week(\d+)\.json$/i;
	const weekEntries = datasetFiles
		.map((f) => {
			const m = f.match(weekPattern);
			return m ? { file: f, week: parseInt(m[1], 10) } : null;
		})
		.filter(Boolean) as { file: string; week: number }[];
	if (weekEntries.length) {
		weekEntries.sort((a, b) => a.week - b.week);
		defaultDataset = weekEntries[weekEntries.length - 1].file;
	}
	if (!defaultDataset && datasetFiles.length)
		defaultDataset = datasetFiles[datasetFiles.length - 1];
} catch {
	datasetFiles = [];
	defaultDataset = null;
}
---

<Layout>
	<Header />
	<main class="pt-24 pb-16 px-5 max-w-6xl mx-auto">
		<h1 class="text-3xl md:text-4xl font-bold mb-3 bg-gradient-to-r from-blue-400 to-purple-600 bg-clip-text text-transparent">Room Finder</h1>
		<p class="text-gray-400 mb-8 max-w-2xl text-sm md:text-base">Find available Computer Science department rooms at a specific day & time. Data sourced from the current timetable dataset. Use the <strong>Now</strong> button for instant availability.</p>

		<!-- Controls -->
		<div class="flex flex-col gap-4 md:gap-6 bg-gray-900/50 border border-gray-800 rounded-xl p-4 md:p-6 backdrop-blur">
			<div class="flex flex-col md:flex-row gap-4 md:items-end">
				<div class="flex-1 min-w-[180px]">
					<label for="dataset" class="block text-xs uppercase tracking-wider text-gray-400 mb-1">Dataset</label>
					<select id="dataset" class="w-full bg-gray-800/60 border border-gray-700 rounded-lg px-3 py-2 text-sm focus:outline-none focus:ring-2 focus:ring-blue-500">
						{datasetFiles.map((f) => (
							<option value={f} selected={f === defaultDataset}>{f}</option>
						))}
					</select>
				</div>
				<div class="flex-1 min-w-[160px]">
					<label class="block text-xs uppercase tracking-wider text-gray-400 mb-1">Day</label>
					<div id="day-filters" class="flex flex-wrap gap-2"></div>
				</div>
				<div class="flex-1 min-w-[160px]">
					<label for="time" class="block text-xs uppercase tracking-wider text-gray-400 mb-1">Time (08:00–18:30)</label>
					<div class="flex gap-2">
						<input id="time" type="time" min="08:00" max="18:30" step="300" class="flex-1 bg-gray-800/60 border border-gray-700 rounded-lg px-3 py-2 text-sm focus:outline-none focus:ring-2 focus:ring-blue-500" />
						<button id="btn-now" class="px-3 py-2 text-xs font-semibold rounded-lg bg-blue-600/80 hover:bg-blue-600 text-white shadow">Now</button>
					</div>
				</div>
			</div>
			<div class="flex flex-wrap gap-3 items-center text-sm">
				<button id="clear" class="px-3 py-2 rounded-lg bg-gray-800/70 border border-gray-700 text-gray-300 hover:bg-gray-700/70">Clear</button>
				<span id="summary" class="text-gray-400"></span>
				<div class="flex items-center gap-2 ml-auto flex-wrap">
					<label class="flex items-center gap-1 text-xs text-gray-400">
						<input id="show-soon" type="checkbox" class="rounded border-gray-600 bg-gray-800 text-blue-600 focus:ring-blue-500" />
						<span>Show rooms freeing in</span>
					</label>
					<select id="soon-mins" class="bg-gray-800/60 border border-gray-700 rounded px-2 py-1 text-xs focus:outline-none focus:ring-1 focus:ring-blue-500 disabled:opacity-40">
						<option value="10">10m</option>
						<option value="15">15m</option>
						<option value="20">20m</option>
						<option value="30" selected>30m</option>
						<option value="45">45m</option>
						<option value="60">60m</option>
					</select>
				</div>
			</div>
		</div>

		<!-- Results -->
		<div class="mt-8 grid md:grid-cols-3 gap-6" id="layout-panels">
			<div class="md:col-span-2 flex flex-col gap-4">
				<h2 id="available-heading" class="text-lg font-semibold text-white flex items-center gap-2">Available Rooms <span id="available-count" class="text-sm text-gray-400 font-normal"></span></h2>
				<div id="available-rooms" class="grid sm:grid-cols-2 lg:grid-cols-3 gap-3"></div>
				<div id="no-results" class="hidden text-gray-400 text-sm bg-gray-900/40 border border-gray-800 rounded-lg p-4">No rooms free at that time.</div>
			</div>
			<div id="schedule-panel" class="md:col-span-1 hidden">
				<h2 id="schedule-heading" class="text-lg font-semibold text-white mb-1">Room Schedule</h2>
				<div id="schedule-room-name" class="text-xs text-gray-400 mb-3"></div>
				<div id="room-schedule" class="space-y-3 text-sm"></div>
			</div>
		</div>

		<!-- Mobile schedule drawer -->
		<div id="mobile-schedule" class="fixed inset-x-0 bottom-0 translate-y-full transition-transform duration-300 bg-gray-950/95 backdrop-blur-md border-t border-gray-800 rounded-t-2xl p-5 shadow-2xl md:hidden">
			<div class="flex items-center justify-between mb-3">
				<h3 class="text-white font-semibold text-base" id="mobile-schedule-title">Room Schedule</h3>
				<button id="mobile-close" class="text-gray-400 hover:text-gray-200">✕</button>
			</div>
			<div id="mobile-schedule-body" class="max-h-[60vh] overflow-y-auto pr-1 text-sm"></div>
		</div>
	</main>
	<Footer />
</Layout>

<script>
	import { to12 } from '../../utils/timetableUtils';
	import { parseHM, formatDelta, roomSlotsForDay, isRoomFreeAt, TEACHING_START, TEACHING_END, getWeekdayOrMonday } from '../../utils/roomFinder';
	import type { RawData } from '../../utils/roomFinder';

	const datasetSelect = document.getElementById('dataset') as HTMLSelectElement | null;
	const dayFiltersEl = document.getElementById('day-filters');
	const timeInput = document.getElementById('time') as HTMLInputElement | null;
	const btnNow = document.getElementById('btn-now');
	const availableEl = document.getElementById('available-rooms');
	const countEl = document.getElementById('available-count');
	const availableHeadingEl = document.getElementById('available-heading');
	const scheduleEl = document.getElementById('room-schedule');
	const schedulePanelEl = document.getElementById('schedule-panel');
	const scheduleHeadingEl = document.getElementById('schedule-heading');
	const scheduleRoomNameEl = document.getElementById('schedule-room-name');
	// roomSelect removed (user selects by clicking a card only)
	const summaryEl = document.getElementById('summary');
	const clearBtn = document.getElementById('clear');
	const noResultsEl = document.getElementById('no-results');
	const mobileSchedule = document.getElementById('mobile-schedule');
	const mobileClose = document.getElementById('mobile-close');
	const mobileBody = document.getElementById('mobile-schedule-body');
	const mobileTitle = document.getElementById('mobile-schedule-title');
	const showSoonEl = document.getElementById('show-soon') as HTMLInputElement | null;
	const soonMinsEl = document.getElementById('soon-mins') as HTMLSelectElement | null;

	let rawData: RawData = {} as RawData;
	let activeDay: string | null = null;
	let selectedRoom: string | null = null; // remains for clicked selection
	let showSoon = false;
	let soonThreshold = 30;

	function makeDayButton(day: string) {
		if (!dayFiltersEl) return;
		const btn = document.createElement('button');
		btn.type = 'button';
		btn.textContent = day.slice(0,3);
		btn.className = 'px-3 py-1 rounded-full text-xs font-medium border transition-colors ' +
			' ' + (activeDay === day ? 'bg-blue-600 text-white border-blue-500 shadow' : 'bg-gray-800/60 text-gray-300 border-gray-700 hover:border-gray-600');
		btn.addEventListener('click', () => {
			activeDay = activeDay === day ? null : day;
			buildDayFilters();
			syncURL();
			render();
		});
		dayFiltersEl.appendChild(btn);
	}

	function buildDayFilters() {
		if (!dayFiltersEl) return;
		dayFiltersEl.innerHTML = '';
		// Only Monday-Friday
		['Monday','Tuesday','Wednesday','Thursday','Friday'].forEach(makeDayButton);
	}

// buildRoomSelect removed (logic centralized in utils)

	function updateAvailableHeading(day: string | null, minutes: number | null) {
		if (!availableHeadingEl) return;
		if (!day || minutes == null) { availableHeadingEl.firstChild && (availableHeadingEl.childNodes[0].textContent = 'Available Rooms '); return; }
		const hh = String(Math.floor(minutes/60)).padStart(2,'0');
		const mm = String(minutes%60).padStart(2,'0');
		const ampm = to12(`${hh}:${mm}`);
		availableHeadingEl.childNodes[0].textContent = `Available Rooms at ${ampm} on ${day} `;
	}

	function hideSchedule() {
		if (schedulePanelEl) schedulePanelEl.classList.add('hidden');
		scheduleEl && (scheduleEl.innerHTML='');
		if (scheduleRoomNameEl) scheduleRoomNameEl.textContent='';
	}
	function showSchedule(day: string, room: string) {
		if (!schedulePanelEl || !scheduleHeadingEl) return;
		schedulePanelEl.classList.remove('hidden');
		scheduleHeadingEl.textContent = `Room Schedule on ${day}`;
		if (scheduleRoomNameEl) scheduleRoomNameEl.textContent = room.replace('Department of Computer Science','CS');
	}

	function render() {
		if (!availableEl) return;
		availableEl.innerHTML = '';
		const day = activeDay; const tVal = timeInput?.value || '';
		if (!day || !tVal) {
			if (summaryEl) summaryEl.textContent = 'Select a day and time.';
			updateAvailableHeading(null, null);
			hideSchedule();
			return;
		}
		let minutes = parseHM(tVal); if(minutes==null) return;
		if (minutes < TEACHING_START || minutes > TEACHING_END) {
			if (summaryEl) summaryEl.textContent = 'Outside teaching hours (08:00–18:30)';
			if (noResultsEl) { noResultsEl.classList.remove('hidden'); noResultsEl.textContent = 'No data outside teaching hours.'; }
			updateAvailableHeading(day, minutes);
			hideSchedule();
			return;
		}
		const csRooms = Object.keys(rawData[day] || {}).filter(r=> r.startsWith('Department of Computer Science'));
		const uniqueRooms = csRooms.sort();
		const list = uniqueRooms.map(room => ({ room, status: isRoomFreeAt(rawData, day, room, minutes) }));
		const free = list.filter(l=> l.status.free);
		let soon: typeof list = [];
		if (showSoon) {
			soon = list.filter(l=> {
				if (l.status.free) return false;
				if (l.status.currentEnds == null) return false;
				const minutesLeft = l.status.currentEnds - minutes;
				if (minutesLeft < 0 || minutesLeft > soonThreshold) return false;
				// Exclude if immediate continuation (no gap)
				if (l.status.immediateContinuation) return false;
				return true;
			});
		}
		if (noResultsEl) noResultsEl.classList.toggle('hidden', free.length>0);
		if (countEl) countEl.textContent = free.length ? `(${free.length} free)` : '';
		if (summaryEl) {
			const soonPart = showSoon && soon.length ? ` • ${soon.length} freeing ≤ ${soonThreshold}m` : '';
			summaryEl.textContent = `${free.length} free of ${list.length} rooms${soonPart}`;
		}
		updateAvailableHeading(day, minutes);
		if (!free.length) { hideSchedule(); return; }
		free.forEach(({ room, status }) => {
			const card = document.createElement('button');
			card.type='button';
			card.className='room-card group flex flex-col text-left bg-gray-900/60 hover:bg-gray-800/70 border border-gray-800 hover:border-blue-500/60 rounded-lg p-3 transition focus:outline-none focus:ring-2 focus:ring-blue-600';
			const nextDelta = status.nextStart != null ? status.nextStart - minutes : null;
			const nextStr = status.nextStart != null ? `Next class in ${formatDelta(nextDelta)} (${to12(String(Math.floor(status.nextStart/60)).padStart(2,'0')+':'+String(status.nextStart%60).padStart(2,'0'))})` : `Free until ${to12('18:30')}`;
			card.innerHTML = `<div class='text-sm font-semibold text-white mb-1'>${room.replace('Department of Computer Science','CS')}</div>
				<div class='text-xs text-gray-400'>${nextStr}</div>`;
			card.addEventListener('click', ()=> {
				if (selectedRoom === room) { selectedRoom = null; hideSchedule(); syncURL(); updateCardSelections(); return; }
				selectedRoom = room; syncURL(); renderSchedule(); showSchedule(day, room); updateCardSelections(); if (window.innerWidth < 768) openMobileSchedule();
			});
			if (selectedRoom === room) card.classList.add('active');
			availableEl.appendChild(card);
		});
		// Soon-free section
		if (showSoon && soon.length) {
			const divider = document.createElement('div');
			divider.className='col-span-full text-xs uppercase tracking-wider text-gray-500 mt-2';
			divider.textContent = 'Free Soon';
			availableEl.appendChild(divider);
			soon.forEach(({ room, status }) => {
				const minutesLeft = (status.currentEnds || 0) - minutes;
				// Compute how long it will be free once current class ends.
				let freeDuration: number | null = null;
				if (status.nextAfterCurrentStart) {
					freeDuration = status.nextAfterCurrentStart - (status.currentEnds || 0);
				} else {
					// No further class: free until end of teaching day 18:30 (1110)
					freeDuration = 1110 - (status.currentEnds || 0);
				}
				if (freeDuration != null && freeDuration < 0) freeDuration = 0;
				const freeDurationStr = freeDuration != null ? formatDelta(freeDuration) : '';
				const card = document.createElement('button');
				card.type='button';
				card.className='room-card group flex flex-col text-left bg-gray-800/50 hover:bg-gray-800/70 border border-amber-500/40 hover:border-amber-400/70 rounded-lg p-3 transition focus:outline-none focus:ring-2 focus:ring-amber-500';
				card.innerHTML = `<div class='text-sm font-semibold text-amber-300 mb-1'>${room.replace('Department of Computer Science','CS')}</div>
					<div class='text-xs text-amber-400'>Free in ${minutesLeft}m${freeDurationStr ? ` (for ${freeDurationStr})` : ''}</div>`;
				card.addEventListener('click', ()=> {
					if (selectedRoom === room) { selectedRoom = null; hideSchedule(); syncURL(); updateCardSelections(); return; }
					selectedRoom = room; syncURL(); renderSchedule(); showSchedule(day, room); updateCardSelections(); if (window.innerWidth < 768) openMobileSchedule();
				});
				if (selectedRoom === room) card.classList.add('active');
				availableEl.appendChild(card);
			});
		}
		if (selectedRoom) { renderSchedule(); showSchedule(day, selectedRoom); }
	}

	function updateCardSelections() {
		const cards = document.querySelectorAll('.room-card');
		cards.forEach(c => {
			if (!(c instanceof HTMLElement)) return;
			const label = c.querySelector('div.text-sm, div.text-sm.font-semibold');
			const text = label ? label.textContent || '' : '';
			if (selectedRoom && text && selectedRoom.includes(text.replace(/^CS/, 'Department of Computer Science'))) {
				c.classList.add('active');
			} else {
				c.classList.remove('active');
			}
		});
		if (!selectedRoom) hideSchedule();
	}

	function renderSchedule() {
		if (!scheduleEl || !activeDay || !selectedRoom) return;
		scheduleEl.innerHTML='';
		const minutes = parseHM(timeInput?.value || '') || 0;
		const slots = roomSlotsForDay(rawData, activeDay, selectedRoom);
		if (!slots.length) { scheduleEl.innerHTML = `<div class='text-gray-400 text-sm'>No classes scheduled in this room on ${activeDay}.</div>`; mobileBody && (mobileBody.innerHTML=scheduleEl.innerHTML); return; }
		const frag = document.createDocumentFragment();
		slots.forEach(s=>{
			const start = parseHM(s.start)||0, end=parseHM(s.end)||start+50;
			const active = minutes>=start && minutes<end;
			const div = document.createElement('div');
			div.className='rounded-lg p-3 border text-xs flex flex-col gap-1 '+ (active? 'border-blue-500 bg-blue-600/10 shadow':'border-gray-800 bg-gray-900/40');
			div.innerHTML = `<div class='flex justify-between'><span class='font-medium text-white'>${s.course}</span><span class='text-gray-400'>${to12(s.start)} - ${to12(s.end)}</span></div>
				<div class='text-gray-400'>${s.teacher}</div>`;
			frag.appendChild(div);
		});
		scheduleEl.appendChild(frag);
		if (mobileBody && mobileTitle) { mobileTitle.textContent = selectedRoom.replace('Department of Computer Science','CS') + ' • '+ activeDay; mobileBody.innerHTML = scheduleEl.innerHTML; }
	}

	function openMobileSchedule() { if(!mobileSchedule) return; mobileSchedule.style.transform='translateY(0)'; }
	function closeMobileSchedule() { if(!mobileSchedule) return; mobileSchedule.style.transform='translateY(100%)'; }
	mobileClose?.addEventListener('click', closeMobileSchedule);

	function syncURL() {
		const params = new URLSearchParams();
		if (datasetSelect?.value) params.set('ds', datasetSelect.value);
		if (activeDay) params.set('day', activeDay);
		if (timeInput?.value) params.set('time', timeInput.value);
		if (selectedRoom) params.set('room', selectedRoom);
		if (showSoon) params.set('soon','1');
		if (showSoon) params.set('soonM', String(soonThreshold));
		history.replaceState(null,'', `${location.pathname}?${params.toString()}`);
	}
	function loadFromURL() {
		const params = new URLSearchParams(location.search);
		const ds = params.get('ds'); if (ds && datasetSelect) datasetSelect.value = ds;
		const day = params.get('day'); if(day) activeDay = ['Monday','Tuesday','Wednesday','Thursday','Friday'].includes(day) ? day : null;
		const time = params.get('time'); if(time && timeInput) timeInput.value = time;
		const room = params.get('room'); if(room) selectedRoom = room;
		const soon = params.get('soon'); showSoon = soon === '1';
		const soonM = params.get('soonM'); if (soonM && !isNaN(parseInt(soonM))) soonThreshold = parseInt(soonM,10);
		if (showSoonEl) showSoonEl.checked = showSoon;
		if (soonMinsEl) soonMinsEl.value = String(soonThreshold);
		if (soonMinsEl) soonMinsEl.disabled = !showSoon;
	}

	async function loadDataset(name: string) {
		if (!name) return; try { const res = await fetch(`/parsed/${name}`); rawData = await res.json(); if (!activeDay) { activeDay = getWeekdayOrMonday(); } buildDayFilters(); render(); } catch(e) { console.error('Failed to load dataset', e); }
	}

	datasetSelect?.addEventListener('change', ()=> { loadDataset(datasetSelect.value); syncURL(); });
	// roomSelect listener removed
	timeInput?.addEventListener('input', ()=> { selectedRoom=null; hideSchedule(); syncURL(); render(); });
	clearBtn?.addEventListener('click', ()=> { activeDay=null; selectedRoom=null; if (timeInput) timeInput.value=''; hideSchedule(); buildDayFilters(); syncURL(); render(); });
	showSoonEl?.addEventListener('change', ()=> { showSoon = !!showSoonEl.checked; if (soonMinsEl) soonMinsEl.disabled = !showSoon; syncURL(); render(); });
	soonMinsEl?.addEventListener('change', ()=> { soonThreshold = parseInt(soonMinsEl.value,10); syncURL(); render(); });
	btnNow?.addEventListener('click', ()=> {
		setNowTime(true);
	});

	function setNowTime(force: boolean) {
		const now = new Date();
		activeDay = getWeekdayOrMonday();
		const hh = String(now.getHours()).padStart(2,'0');
		const mm = String(now.getMinutes()).padStart(2,'0');
		if (timeInput && (force || !timeInput.value)) timeInput.value = `${hh}:${mm}`;
		if (force) { selectedRoom=null; hideSchedule(); buildDayFilters(); syncURL(); render(); }
	}

	loadFromURL();
	// If no time provided via URL, initialize to real current time (unclamped)
	setNowTime(false);
	if (datasetSelect instanceof HTMLSelectElement) loadDataset(datasetSelect.value);
</script>

<style>
/* Page-specific overrides (structural layout only) now that core styles are external */
@media (max-width: 767px) { #layout-panels { display:flex; flex-direction:column; } }
</style>

