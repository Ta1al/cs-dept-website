---
import Layout from '../layouts/Layout.astro';
import Header from '@components/layout/Header.astro';
import Footer from '@components/layout/Footer.astro';
import '../styles/global.css';
import '../styles/timetable.css';
import fs from 'node:fs';

// Discover all JSON datasets in public/parsed at build time
const parsedDir = new URL('../../public/parsed/', import.meta.url);
let datasetFiles: string[] = [];
let defaultDataset: string | null = null;
try {
  datasetFiles = fs
    .readdirSync(parsedDir)
    .filter((f) => f.endsWith('.json'))
    .sort();
  // Determine latest week by parsing filenames like week3.json (highest numeric week wins)
  const weekPattern = /^week(\d+)\.json$/i;
  const weekEntries = datasetFiles
    .map((f) => {
      const m = f.match(weekPattern);
      return m ? { file: f, week: parseInt(m[1], 10) } : null;
    })
    .filter(Boolean) as { file: string; week: number }[];
  if (weekEntries.length) {
    weekEntries.sort((a, b) => a.week - b.week);
    defaultDataset = weekEntries[weekEntries.length - 1].file;
  }
  // Fallback: if no week pattern, choose last alphabetically
  if (!defaultDataset && datasetFiles.length)
    defaultDataset = datasetFiles[datasetFiles.length - 1];
} catch (err) {
  console.error('Error discovering timetable datasets:', err);
}
---

<Layout>
  <Header />
  <main class="max-w-7xl mx-auto px-4 py-8">
    <h1 class="text-2xl font-bold mb-4">Department Timetable</h1>

    <div class="flex flex-wrap gap-3 items-center mb-4">
      <label class="text-sm text-gray-300">
        Dataset
        <select
          id="dataset"
          class="ml-2 bg-gray-800 border border-gray-700 rounded px-2 py-1"
        >
          {
            datasetFiles.map((f) => (
              <option value={f} selected={f === defaultDataset}>
                {f}
              </option>
            ))
          }
        </select>
      </label>

      <div class="relative">
        <input
          id="search"
          type="text"
          placeholder="Search course, teacher, room..."
          class="bg-gray-800 border border-gray-700 rounded pl-3 pr-3 py-1.5 w-72"
        />
      </div>

      <button
        id="toggle-simplified"
        aria-pressed="false"
        class="simplified-switch group ml-auto hidden lg:block"
      >
        <span class="switch-track"></span>
        <span class="switch-thumb"></span>
        <span class="switch-label">Simplified View</span>
      </button>

      <button
        id="export-google-calendar"
        class="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-lg transition-all duration-200 flex items-center gap-2 text-sm font-medium"
        title="Export filtered results to Google Calendar"
      >
        <svg class="w-4 h-4" fill="currentColor" viewBox="0 0 24 24">
          <path
            d="M19 3h-1V1h-2v2H8V1H6v2H5c-1.11 0-2 .9-2 2v14c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm0 16H5V8h14v11zM7 10h5v5H7z"
          ></path>
        </svg>
        <span>Export to Calendar</span>
      </button>
    </div>

    <div class="flex justify-between items-center" id="filter-toggle-wrapper">
      <button
        id="mobile-filter-toggle"
        class="text-xs tracking-wide font-semibold flex items-center gap-2 px-3 py-2 rounded-md bg-gray-800/70 border border-gray-700 hover:border-gray-500 hover:bg-gray-700/70 transition"
      >
        <span>Filters</span>
        <span
          id="mobile-filter-count"
          class="inline-flex items-center justify-center text-[10px] font-bold bg-blue-600/70 text-white rounded-full min-w-[1.25rem] h-5 px-1"
        ></span>
        <svg
          id="mobile-filter-caret"
          class="w-3.5 h-3.5 opacity-70"
          viewBox="0 0 20 20"
          fill="currentColor"
        >
          <path
            fill-rule="evenodd"
            d="M5.23 7.21a.75.75 0 011.06.02L10 10.94l3.71-3.71a.75.75 0 111.08 1.04l-4.25 4.25a.75.75 0 01-1.08 0L5.21 8.27a.75.75 0 01.02-1.06z"
            clip-rule="evenodd"></path>
        </svg>
      </button>
    </div>

    <div
      id="filters"
      class="collapsed space-y-2 flex flex-col items-stretch max-w-4xl mx-auto md:mt-0 mt-2"
    >
      <div id="day-filters" class="filter-row"></div>
      <div id="degree-filters" class="filter-row"></div>
      <div id="program-filters" class="filter-row"></div>
      <div id="semester-filters" class="filter-row"></div>
      <div id="section-filters" class="filter-row"></div>
      <div class="pt-2 flex justify-center">
        <button id="clear-filters" class="clear-btn">Clear Filters</button>
      </div>
    </div>

    <div
      class="bg-gray-900/60 backdrop-blur rounded-xl border border-gray-800 shadow-xl overflow-hidden"
    >
      <div class="max-h-[60vh] overflow-auto" id="results-wrapper">
        <table class="min-w-full text-sm table-fixed align-top">
          <colgroup>
            <col style="width: 11rem;" />
            <col style="width: 20rem;" />
            <col style="width: 7rem;" />
            <col style="width: 18rem;" />
            <col style="width: 14rem;" />
            <col style="width: 8rem;" />
            <col style="width: 7rem;" />
            <col style="width: 14rem;" />
          </colgroup>
          <thead
            class="bg-gray-800/70 text-gray-300 sticky top-0 z-10 backdrop-blur supports-[backdrop-filter]:bg-gray-800/60"
          >
            <tr class="text-left">
              <th class="px-3 py-2 font-medium" data-sort="start_time">Time</th>
              <th class="px-3 py-2 font-medium" data-sort="course_title"
                >Course</th
              >
              <th class="px-3 py-2 font-medium" data-sort="course_code">Code</th
              >
              <th class="px-3 py-2 font-medium" data-sort="program_line"
                >Program / Semester</th
              >
              <th class="px-3 py-2 font-medium" data-sort="teacher_name"
                >Teacher</th
              >
              <th class="px-3 py-2 font-medium" data-sort="room">Room</th>
              <th class="px-3 py-2 font-medium" data-sort="day">Day</th>
              <th class="px-3 py-2 font-medium">Flags</th>
            </tr>
          </thead>
          <tbody id="results" class="divide-y divide-gray-800"></tbody>
        </table>
      </div>
    </div>
    <div id="mobile-results" class="mt-6 space-y-3"></div>
  </main>
  <Footer />
</Layout>

<script>
  // Re-bind imported utilities (Astro frontmatter imports are server-side; re-import for client script)
  import { DAY_ORDER, to12, buildClassShort } from '../utils/timetableUtils';
  // --- Type Definitions ---
  interface RawEntry {
    combined_class: boolean | null;
    course_title: string | null;
    course_code: string | null;
    program_line: string | null;
    degree: string | null;
    program: string | null;
    section: string | null;
    session: string | null;
    semester: number | null;
    teacher_name: string | null;
    start_time: string | null;
    end_time: string | null;
    practical: boolean | null;
    raw_lines?: string[];
  }
  interface FlatRecord {
    day: string;
    room: string;
    course_title: string;
    course_code: string;
    program_line: string;
    degree: string;
    program: string;
    section: string;
    session: string;
    semester: number | null;
    teacher_name: string;
    combined_class: boolean | null;
    start_time: string;
    end_time: string;
    practical: boolean | null | undefined;
    raw: string[];
  }

  // Element refs (narrowed to specific types)
  const datasetSelect = document.getElementById(
    'dataset'
  ) as HTMLSelectElement | null;
  const searchInput = document.getElementById(
    'search'
  ) as HTMLInputElement | null;
  const resultsEl = document.getElementById(
    'results'
  ) as HTMLTableSectionElement | null;

  const mobileResultsEl = document.getElementById(
    'mobile-results'
  ) as HTMLElement | null;
  const simplifiedToggle = document.getElementById(
    'toggle-simplified'
  ) as HTMLButtonElement | null;
  const dayFiltersEl = document.getElementById(
    'day-filters'
  ) as HTMLElement | null;
  const semesterFiltersEl = document.getElementById(
    'semester-filters'
  ) as HTMLElement | null;
  const programFiltersEl = document.getElementById(
    'program-filters'
  ) as HTMLElement | null;
  const sectionFiltersEl = document.getElementById(
    'section-filters'
  ) as HTMLElement | null;
  const degreeFiltersEl = document.getElementById(
    'degree-filters'
  ) as HTMLElement | null;

  type RawData = Record<string, Record<string, RawEntry[]>>;
  let rawData: RawData = {} as RawData; // initial nested data with day->room->entries
  let flat: FlatRecord[] = []; // flattened records array
  const activeDays = new Set<string>();
  const activeSemesters = new Set<string>();
  const activePrograms = new Set<string>();
  const activeSections = new Set<string>();
  const activeDegrees = new Set<string>();

  // DAY_ORDER & to12 now imported from timetableUtils

  function makeButton(
    label: string,
    container: HTMLElement | null,
    set: Set<string>,
    displayLabel?: string
  ): void {
    if (!container) return;
    const btn = document.createElement('button');
    btn.type = 'button';
    // Use displayLabel (e.g., 'Semester 4') for text while keeping raw label for filter set
    btn.textContent = displayLabel || label;
    btn.dataset.filterValue = label;
    const base = 'chip';
    const inactive = 'chip-inactive';
    // contextual color accent based on row type
    let accent = '';
    if (container.id === 'day-filters') accent = 'chip-accent-day';
    else if (container.id === 'degree-filters') accent = 'chip-accent-degree';
    else if (container.id === 'program-filters') accent = 'chip-accent-program';
    else if (container.id === 'semester-filters')
      accent = 'chip-accent-semester';
    else if (container.id === 'section-filters') accent = 'chip-accent-section';
    const activeClasses = ['chip-active'];
    const isActive = set.has(label);
    btn.className =
      base +
      ' ' +
      accent +
      ' ' +
      (isActive ? activeClasses.join(' ') : inactive);
    btn.addEventListener('click', () => {
      const key = btn.dataset.filterValue || label;
      if (set.has(key)) set.delete(key);
      else set.add(key);
      const active = set.has(key);
      if (active) {
        activeClasses.forEach((c) => btn.classList.add(c));
        btn.classList.remove('chip-inactive');
      } else {
        activeClasses.forEach((c) => btn.classList.remove(c));
        btn.classList.add('chip-inactive');
      }
      render();
      updateActiveCountBadge();
    });
    container.appendChild(btn);
  }

  async function loadDataset(name: string): Promise<void> {
    if (resultsEl)
      resultsEl.innerHTML =
        '<tr><td class="px-4 py-6 text-center text-gray-400" colspan="8">Loading...</td></tr>';
    try {
      const res = await fetch(`/parsed/${name}`);
      rawData = await res.json();
      flatten();
      buildFilters();
      render();
      updateActiveCountBadge();
    } catch (err) {
      if (resultsEl)
        resultsEl.innerHTML = `<tr><td class='px-4 py-6 text-center text-red-400' colspan='8'>Failed to load dataset: ${err}</td></tr>`;
    }
  }

  function flatten(): void {
    flat = [];
    Object.entries(rawData).forEach(([day, rooms]) => {
      Object.entries(rooms).forEach(([room, entries]) => {
        if (!Array.isArray(entries)) return;
        entries.forEach((entry) => {
          if (!entry) return;
          const rec: FlatRecord = {
            day,
            room,
            course_title: entry.course_title || '',
            course_code: entry.course_code || '',
            program_line: entry.program_line || '',
            degree: entry.degree || '',
            program: entry.program || '',
            section: entry.section || '',
            session: entry.session || '',
            semester: entry.semester ?? null,
            teacher_name: entry.teacher_name || '',
            combined_class: entry.combined_class ?? null,
            start_time: entry.start_time || '',
            end_time: entry.end_time || '',
            practical:
              (entry.practical ?? false) &&
              (entry.raw_lines?.some((l: string) => /practical/i.test(l)) ||
                entry.practical),
            raw: entry.raw_lines || [],
          };
          const meaningful = rec.course_title && rec.course_title !== '';
          if (meaningful || rec.teacher_name || rec.program_line)
            flat.push(rec);
        });
      });
    });
  }

  function buildFilters(): void {
    if (dayFiltersEl) dayFiltersEl.innerHTML = '';
    if (degreeFiltersEl) degreeFiltersEl.innerHTML = '';
    if (programFiltersEl) programFiltersEl.innerHTML = '';
    if (semesterFiltersEl) semesterFiltersEl.innerHTML = '';
    if (sectionFiltersEl) sectionFiltersEl.innerHTML = '';

    const days = [...new Set(flat.map((r) => r.day))].sort(
      (a, b) => DAY_ORDER.indexOf(a) - DAY_ORDER.indexOf(b)
    );
    const semesters = [
      ...new Set(flat.map((r) => r.semester).filter((v) => v != null)),
    ].sort((a, b) => (Number(a) as number) - (Number(b) as number));
    const programs = [
      ...new Set(flat.map((r) => r.program).filter(Boolean)),
    ].sort();
    const degrees = [
      ...new Set(flat.map((r) => r.degree).filter(Boolean)),
    ].sort();

    days.forEach((d) => makeButton(d, dayFiltersEl, activeDays));
    // Degrees row (explicit BS, MS, PhD ordering if present)
    const DEG_ORDER = ['BS', 'MS', 'PhD'];
    const orderedDegrees = degrees.sort((a, b) => {
      const ai = DEG_ORDER.indexOf(a.toUpperCase());
      const bi = DEG_ORDER.indexOf(b.toUpperCase());
      if (ai === -1 && bi === -1) return a.localeCompare(b);
      if (ai === -1) return 1;
      if (bi === -1) return -1;
      return ai - bi;
    });
    orderedDegrees.forEach((dg) =>
      makeButton(dg, degreeFiltersEl, activeDegrees)
    );
    programs.forEach((p) => makeButton(p, programFiltersEl, activePrograms));
    semesters.forEach((s) =>
      makeButton(String(s), semesterFiltersEl, activeSemesters, `Semester ${s}`)
    );
    // Sections: only show if multiple distinct non-empty sections exist
    const sections = [
      ...new Set(flat.map((r) => r.section).filter(Boolean)),
    ].sort();
    if (sections.length > 1) {
      sections.forEach((sec) =>
        makeButton(sec, sectionFiltersEl, activeSections)
      );
    }
  }

  function recordMatches(rec: FlatRecord, q: string): boolean {
    if (!q) return true;
    const hay = [
      rec.course_title,
      rec.course_code,
      rec.program_line,
      rec.degree,
      rec.program,
      rec.section,
      rec.session,
      rec.teacher_name,
      rec.room,
      rec.day,
      String(rec.semester || ''),
    ]
      .join(' ')
      .toLowerCase();
    return q.split(/\s+/).every((term: string) => hay.includes(term));
  }

  function applyFilters(list: FlatRecord[]): FlatRecord[] {
    return list.filter((r: FlatRecord) => {
      if (activeDays.size && !activeDays.has(r.day)) return false;
      if (activeSemesters.size && !activeSemesters.has(String(r.semester)))
        return false;
      if (activePrograms.size && !activePrograms.has(r.program)) return false;
      if (activeSections.size && !activeSections.has(r.section)) return false;
      if (activeDegrees.size && !activeDegrees.has(r.degree)) return false;
      return true;
    });
  }

  let sortKey: keyof FlatRecord | 'day' = 'day';
  let sortDir: 1 | -1 = 1;
  let debounceTimer: number | null = null;

  function headerSortHandler(th: HTMLElement, key: keyof FlatRecord | 'day') {
    th.addEventListener('click', () => {
      if (sortKey === key) {
        sortDir = sortDir === 1 ? -1 : 1;
      } else {
        sortKey = key;
        sortDir = 1;
      }
      render();
    });
  }

  function attachHeaderSorting() {
    document.querySelectorAll('thead th').forEach((th) => {
      const key = (th as HTMLElement).dataset.sort as
        | keyof FlatRecord
        | 'day'
        | undefined;
      if (key) {
        headerSortHandler(th as HTMLElement, key);
      }
    });
  }

  function syncURL() {
    const params = new URLSearchParams();
    if (datasetSelect?.value) params.set('ds', datasetSelect.value);
    const q = searchInput?.value?.trim();
    if (q) params.set('q', q);
    if (activeDays.size) params.set('days', [...activeDays].join('|'));
    if (activeSemesters.size) params.set('sem', [...activeSemesters].join('|'));
    if (activePrograms.size) params.set('prog', [...activePrograms].join('|'));
    if (activeSections.size) params.set('sec', [...activeSections].join('|'));
    if (activeDegrees.size) params.set('deg', [...activeDegrees].join('|'));
    if (sortKey) params.set('sort', sortKey);
    if (sortDir === -1) params.set('dir', 'desc');
    if (document.documentElement.classList.contains('simplified'))
      params.set('mode', 'simple');
    // grouping removed
    const newUrl = `${location.pathname}?${params.toString()}`;
    history.replaceState(null, '', newUrl);
  }

  function loadFromURL() {
    const params = new URLSearchParams(location.search);
    const ds = params.get('ds');
    if (ds && datasetSelect) datasetSelect.value = ds;
    const q = params.get('q');
    if (q && searchInput) searchInput.value = q;
    const days = params.get('days');
    if (days) days.split('|').forEach((d) => activeDays.add(d));
    const sem = params.get('sem');
    if (sem) sem.split('|').forEach((s) => activeSemesters.add(s));
    const prog = params.get('prog');
    if (prog) prog.split('|').forEach((p) => activePrograms.add(p));
    const sec = params.get('sec');
    if (sec) sec.split('|').forEach((s) => activeSections.add(s));
    const deg = params.get('deg');
    if (deg) deg.split('|').forEach((d) => activeDegrees.add(d));
    const sk = params.get('sort') as keyof FlatRecord | 'day' | null;
    if (sk) sortKey = sk;
    const sd = params.get('dir');
    if (sd === 'desc') sortDir = -1;
    const mode = params.get('mode');
    if (mode === 'simple' || !mode) {
      // Default to simplified when param missing or explicitly simple
      document.documentElement.classList.add('simplified');
      if (simplifiedToggle) {
        simplifiedToggle.classList.add('active');
        simplifiedToggle.setAttribute('aria-pressed', 'true');
      }
      // If param was missing, reflect it in URL after initial render
    }
    // grouping removed
  }

  function render(): void {
    const q = (searchInput?.value || '').trim().toLowerCase();
    const list = applyFilters(flat).filter((r: FlatRecord) =>
      recordMatches(r, q)
    );
    list.sort((a: FlatRecord, b: FlatRecord) => {
      // Sort priority: chosen sortKey then fallback original ordering logic
      const primary = (() => {
        if (sortKey === 'day')
          return DAY_ORDER.indexOf(a.day) - DAY_ORDER.indexOf(b.day);
        const av = (a as unknown as Record<string, unknown>)[sortKey];
        const bv = (b as unknown as Record<string, unknown>)[sortKey];
        if (typeof av === 'number' && typeof bv === 'number') return av - bv;
        return String(av).localeCompare(String(bv));
      })();
      if (primary !== 0) return primary * sortDir;
      const dayDiff = DAY_ORDER.indexOf(a.day) - DAY_ORDER.indexOf(b.day);
      if (dayDiff !== 0) return dayDiff;
      const tA = a.start_time
        ? parseInt(a.start_time.slice(0, 2)) * 60 +
          parseInt(a.start_time.slice(3, 5))
        : 0;
      const tB = b.start_time
        ? parseInt(b.start_time.slice(0, 2)) * 60 +
          parseInt(b.start_time.slice(3, 5))
        : 0;
      if (tA !== tB) return tA - tB;
      if (a.room < b.room) return -1;
      if (a.room > b.room) return 1;
      return 0;
    });
    // Desktop table rows
    const rows = list
      .map((r: FlatRecord) => {
        const flags: string[] = [];
        if (r.combined_class) flags.push('Combined');
        if (r.practical) flags.push('Practical');
        const timeStr = `${to12(r.start_time)}${r.end_time ? ` - ${to12(r.end_time)}` : ''}`;
        const classBase = buildClassShort(r);
        const semSuffix = r.semester != null ? ` (Sem #${r.semester})` : '';
        const classLine = classBase + semSuffix;
        return `<tr>
          <td data-label="Time" class="px-3 py-2 text-gray-300">${timeStr}</td>
          <td data-label="Course" class="px-3 py-2 text-gray-200">${r.course_title || '<span class="text-gray-500">TBA</span>'}</td>
          <td data-label="Code" class="px-3 py-2 text-gray-400">${r.course_code || ''}</td>
          <td data-label="Program / Semester" class="px-3 py-2 text-gray-300">
            <div>${classLine}</div>
            <div class="text-xs">Semester ${r.semester ?? ''} ${r.section ? '• ' + r.section : ''}</div>
          </td>
          <td data-label="Teacher" class="px-3 py-2 text-gray-300">${r.teacher_name || ''}</td>
          <td data-label="Room" class="px-3 py-2 text-gray-400">${r.room}</td>
          <td data-label="Day" class="px-3 py-2 text-gray-400">${r.day}</td>
          <td data-label="Flags" class="px-3 py-2 text-xs">${flags
            .map(
              (f) =>
                `<span class='inline-block bg-blue-600/30 border border-blue-500/40 text-blue-300 rounded-full px-2 py-0.5 mr-1 mb-1'>${f}</span>`
            )
            .join('')}</td>
        </tr>`;
      })
      .join('');
    if (resultsEl)
      resultsEl.innerHTML =
        rows ||
        `<tr><td class='px-4 py-6 text-center text-gray-400' colspan='8'>No matching results</td></tr>`;

    // Mobile simplified cards
    if (mobileResultsEl) {
      const mobileCards = list
        .map((r: FlatRecord) => {
          const classBase = buildClassShort(r);
          const semSuffix = r.semester != null ? ` (Sem #${r.semester})` : '';
          const classLine = classBase + semSuffix;
          const timeStr = `${to12(r.start_time)}${r.end_time ? ` - ${to12(r.end_time)}` : ''}`;
          const flags: string[] = [];
          if (r.combined_class) flags.push('Combined');
          if (r.practical) flags.push('Practical');
          const flagsHTML = flags.length
            ? `<div class="mcard-meta-flags">${flags
                .map((f) => `<span class="mcard-flag">${f}</span>`)
                .join('')}</div>`
            : '';
          return `<div class="mcard">
            <div class="mcard-meta">
              <div class="mcard-meta-day">${r.day}</div>
              <div class="mcard-meta-time">${timeStr}</div>
              ${flagsHTML}
            </div>
            <div class="mcard-course">${r.course_title || '<span class="text-gray-500">TBA</span>'}</div>
            <div class="mcard-class">${classLine}</div>
            <div class="mcard-teacher">${r.teacher_name || ''}</div>
            <div class="mcard-room">${r.room || ''}</div>
          </div>`;
        })
        .join('');
      mobileResultsEl.innerHTML = mobileCards;
    }
    syncURL();
    updateActiveCountBadge();
  }

  function clearAll() {
    activeDays.clear();
    activeSemesters.clear();
    activePrograms.clear();
    activeSections.clear();
    activeDegrees.clear();
    if (searchInput) searchInput.value = '';
    buildFilters();
    render();
  }

  if (datasetSelect)
    datasetSelect.addEventListener(
      'change',
      () => datasetSelect && loadDataset(datasetSelect.value)
    );
  if (searchInput)
    searchInput.addEventListener('input', () => {
      if (debounceTimer) window.clearTimeout(debounceTimer);
      debounceTimer = window.setTimeout(() => {
        render();
      }, 60);
    });

  document.getElementById('clear-filters')?.addEventListener('click', clearAll);
  loadFromURL();

  if (datasetSelect instanceof HTMLSelectElement) {
    loadDataset(datasetSelect.value).then(() => {
      attachHeaderSorting();
    });
  }

  // Mobile filter toggle
  const mobileToggle = document.getElementById('mobile-filter-toggle');
  const filtersContainer = document.getElementById('filters');
  const mobileCount = document.getElementById('mobile-filter-count');

  function countActiveFilters(): number {
    return (
      activeDays.size +
      activeSemesters.size +
      activePrograms.size +
      activeSections.size +
      activeDegrees.size
    );
  }
  function updateActiveCountBadge() {
    if (!mobileCount) return;
    const c = countActiveFilters();
    mobileCount.textContent = c ? String(c) : '';
    mobileCount.style.display = c ? 'inline-flex' : 'none';
  }
  updateActiveCountBadge();

  mobileToggle?.addEventListener('click', () => {
    if (!filtersContainer) return;
    const collapsed = filtersContainer.classList.toggle('collapsed');
    mobileToggle.classList.toggle('active', !collapsed);
  });
  if (filtersContainer?.classList.contains('collapsed')) {
    mobileToggle?.classList.remove('active');
  }
  function autoExpandFiltersForTablet() {
    if (!filtersContainer) return;
    const w = window.innerWidth;
    if (w >= 768 && w <= 820) {
      if (filtersContainer.classList.contains('collapsed')) {
        filtersContainer.classList.remove('collapsed');
        mobileToggle?.classList.add('active');
      }
    }
  }
  autoExpandFiltersForTablet();
  window.addEventListener('resize', () => {
    autoExpandFiltersForTablet();
  });

  simplifiedToggle?.addEventListener('click', () => {
    document.documentElement.classList.toggle('simplified');
    const active = document.documentElement.classList.contains('simplified');
    simplifiedToggle.classList.toggle('active', active);
    simplifiedToggle.setAttribute('aria-pressed', active ? 'true' : 'false');
    render();
  });

  // .ics Calendar Export functionality
  const exportButton = document.getElementById('export-google-calendar');

  function getDayOffset(dayName: string): number {
    const days = [
      'Sunday',
      'Monday',
      'Tuesday',
      'Wednesday',
      'Thursday',
      'Friday',
      'Saturday',
    ];
    return days.indexOf(dayName);
  }

  function getNextOccurrence(dayName: string): Date {
    const today = new Date();
    const targetDay = getDayOffset(dayName);
    const currentDay = today.getDay();
    let daysUntilTarget = targetDay - currentDay;

    if (daysUntilTarget <= 0) {
      daysUntilTarget += 7;
    }

    const nextDate = new Date(today);
    nextDate.setDate(today.getDate() + daysUntilTarget);
    return nextDate;
  }

  function formatDateForICS(date: Date, time: string): string {
    const [hours, minutes] = time.split(':').map(Number);
    const newDate = new Date(date);
    newDate.setHours(hours, minutes, 0, 0);

    // Format: YYYYMMDDTHHmmSS
    const year = newDate.getFullYear();
    const month = String(newDate.getMonth() + 1).padStart(2, '0');
    const day = String(newDate.getDate()).padStart(2, '0');
    const hour = String(newDate.getHours()).padStart(2, '0');
    const minute = String(newDate.getMinutes()).padStart(2, '0');

    return `${year}${month}${day}T${hour}${minute}00`;
  }

  function createICSEvent(record: FlatRecord): string {
    // Get the next occurrence of this class day
    const classDate = getNextOccurrence(record.day);

    // Format start and end times
    const startTime = formatDateForICS(classDate, record.start_time);
    const endTime = formatDateForICS(
      classDate,
      record.end_time || record.start_time
    );

    // Build title and description
    const title = record.course_title || 'Class';
    const description = [
      record.course_code ? `Course Code: ${record.course_code}` : '',
      record.teacher_name ? `Teacher: ${record.teacher_name}` : '',
      record.program_line ? `Program: ${record.program_line}` : '',
      record.semester ? `Semester: ${record.semester}` : '',
      record.section ? `Section: ${record.section}` : '',
      record.practical ? 'Type: Practical' : '',
      record.combined_class ? 'Type: Combined Class' : '',
    ]
      .filter(Boolean)
      .join('\\n');

    const location = `Room ${record.room}`;

    // Generate unique ID for this event
    const uid = `${record.course_code}-${record.day}-${record.start_time}-${Date.now()}@cs-dept.edu`;

    // Create recurring event (weekly for a semester, approximately 16 weeks)
    const rrule = 'FREQ=WEEKLY;COUNT=16';

    // Get current timestamp for DTSTAMP
    const now = new Date();
    const dtstamp = formatDateForICS(now, `${String(now.getHours()).padStart(2, '0')}:${String(now.getMinutes()).padStart(2, '0')}`);

    // Get day of week for BYDAY rule
    const dayAbbreviations: Record<string, string> = {
      'Sunday': 'SU',
      'Monday': 'MO',
      'Tuesday': 'TU',
      'Wednesday': 'WE',
      'Thursday': 'TH',
      'Friday': 'FR',
      'Saturday': 'SA'
    };
    const byday = dayAbbreviations[record.day];

    return `BEGIN:VEVENT
UID:${uid}
DTSTAMP:${dtstamp}
DTSTART:${startTime}
DTEND:${endTime}
SUMMARY:${title}
DESCRIPTION:${description}
LOCATION:${location}
RRULE:${rrule};BYDAY=${byday}
STATUS:CONFIRMED
SEQUENCE:0
END:VEVENT`;
  }

  function generateICSFile(records: FlatRecord[]): string {
    const events = records.map(createICSEvent).join('\n');

    return `BEGIN:VCALENDAR
VERSION:2.0
PRODID:-//CS Department//Timetable//EN
CALSCALE:GREGORIAN
METHOD:PUBLISH
X-WR-CALNAME:CS Department Timetable
X-WR-TIMEZONE:Asia/Karachi
${events}
END:VCALENDAR`;
  }

  function downloadICS(content: string, filename: string): void {
    const blob = new Blob([content], { type: 'text/calendar;charset=utf-8' });
    const link = document.createElement('a');
    link.href = URL.createObjectURL(blob);
    link.download = filename;
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    URL.revokeObjectURL(link.href);
  }

  exportButton?.addEventListener('click', () => {
    // Get currently filtered results
    const q = (searchInput?.value || '').trim().toLowerCase();
    const filteredList = applyFilters(flat).filter((r: FlatRecord) =>
      recordMatches(r, q)
    );

    if (filteredList.length === 0) {
      alert('No timetable entries to export. Please adjust your filters.');
      return;
    }

    // Group by similar classes to avoid duplicates
    const uniqueClasses = new Map<string, FlatRecord>();

    filteredList.forEach((record: FlatRecord) => {
      // Create a unique key for each class
      const key = `${record.course_code}-${record.day}-${record.start_time}-${record.room}`;
      if (!uniqueClasses.has(key)) {
        uniqueClasses.set(key, record);
      }
    });

    // Generate and download .ics file
    const uniqueRecords = Array.from(uniqueClasses.values());
    const icsContent = generateICSFile(uniqueRecords);
    const filename = `timetable-${new Date().toISOString().split('T')[0]}.ics`;

    downloadICS(icsContent, filename);

    alert(
      `Exported ${uniqueClasses.size} class${uniqueClasses.size === 1 ? '' : 'es'} to ${filename}. You can import this file into Google Calendar, Apple Calendar, Outlook, or any other calendar application.`
    );
  });
</script>
