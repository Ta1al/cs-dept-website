---
import Layout from '../layouts/Layout.astro';
import Header from '../components/Header.astro';
import Footer from '../components/Footer.astro';
import '../styles/global.css';
import fs from 'node:fs';

// Discover all JSON datasets in public/parsed at build time
const parsedDir = new URL('../../public/parsed/', import.meta.url);
let datasetFiles: string[] = [];
let defaultDataset: string | null = null;
try {
  datasetFiles = fs
    .readdirSync(parsedDir)
    .filter((f) => f.endsWith('.json'))
    .sort();
  // Determine latest week by parsing filenames like week3.json (highest numeric week wins)
  const weekPattern = /^week(\d+)\.json$/i;
  const weekEntries = datasetFiles
    .map((f) => {
      const m = f.match(weekPattern);
      return m ? { file: f, week: parseInt(m[1], 10) } : null;
    })
    .filter(Boolean) as { file: string; week: number }[];
  if (weekEntries.length) {
    weekEntries.sort((a, b) => a.week - b.week);
    defaultDataset = weekEntries[weekEntries.length - 1].file;
  }
  // Fallback: if no week pattern, choose last alphabetically
  if (!defaultDataset && datasetFiles.length)
    defaultDataset = datasetFiles[datasetFiles.length - 1];
} catch (e) {
  datasetFiles = [];
  defaultDataset = null;
}
---

<!-- Timetable Page -->
<Layout>
  <Header />
  <main class="pt-32 pb-20 px-6 max-w-7xl mx-auto">
    <h1
      class="text-4xl font-bold mb-6 bg-gradient-to-r from-blue-400 to-purple-600 bg-clip-text text-transparent"
    >
      Department Timetable
    </h1>
    <p class="text-gray-400 mb-8">
      <span
        class="text-amber-400 font-medium">Note:</span
      > This data was heuristically extracted from PDF sources and <a
        class="text-amber-100"
        target="_blank"
        href="https://www.reddit.com/r/AskProgramming/comments/1ahfeti/does_extracting_data_from_pdfs_just_never_work/"
        >may contain errors or inaccuracies</a
      >; always verify critical details (times, rooms) with the official
      timetable PDF.
    </p>

    <!-- Controls -->
    <div class="space-y-4 mb-8" id="controls-wrapper">
      <div class="flex flex-col md:flex-row md:items-center gap-4">
        <div class="flex items-center gap-2">
          <label for="dataset" class="text-sm text-gray-300 whitespace-nowrap"
            >Dataset:</label
          >
          <select
            id="dataset"
            class="bg-gray-900 border border-gray-700 rounded-lg px-3 py-2 text-sm focus:outline-none focus:ring-2 focus:ring-blue-500"
          >
            {
              datasetFiles.map((f) => (
                <option value={f} selected={f === defaultDataset}>
                  {f.replace(/\.json$/, '')}
                </option>
              ))
            }
          </select>
        </div>
        <div class="flex-1 relative">
          <input
            id="search"
            type="text"
            placeholder="Search (course, code, teacher, program, semester, room, etc.)"
            class="w-full bg-gray-900 border border-gray-700 rounded-lg px-4 py-2 pr-10 text-sm focus:outline-none focus:ring-2 focus:ring-blue-500"
          />
          <svg
            class="w-5 h-5 text-gray-500 absolute right-3 top-1/2 -translate-y-1/2"
            fill="none"
            stroke="currentColor"
            viewBox="0 0 24 24"
            ><path
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="2"
              d="M21 21l-4.35-4.35M11 19a8 8 0 100-16 8 8 0 000 16z"
            ></path></svg
          >
        </div>
      </div>
      <!-- Desktop simplified toggle (relocated below main control row) -->
      <div class="hidden md:flex mt-2 items-center justify-end" id="simplified-toggle-row">
        <button id="toggle-simplified" aria-pressed="false" class="simplified-switch group">
          <span class="switch-track"></span>
          <span class="switch-thumb"></span>
          <span class="switch-label">Simplified View</span>
        </button>
      </div>

      <!-- Mobile/Tablet (<=820px) filter toggle -->
      <div class="flex justify-between items-center" id="filter-toggle-wrapper">
        <button id="mobile-filter-toggle" class="text-xs tracking-wide font-semibold flex items-center gap-2 px-3 py-2 rounded-md bg-gray-800/70 border border-gray-700 hover:border-gray-500 hover:bg-gray-700/70 transition">
          <span>Filters</span>
          <span id="mobile-filter-count" class="inline-flex items-center justify-center text-[10px] font-bold bg-blue-600/70 text-white rounded-full min-w-[1.25rem] h-5 px-1"></span>
          <svg id="mobile-filter-caret" class="w-3.5 h-3.5 opacity-70" viewBox="0 0 20 20" fill="currentColor"><path fill-rule="evenodd" d="M5.23 7.21a.75.75 0 011.06.02L10 10.94l3.71-3.71a.75.75 0 111.08 1.04l-4.25 4.25a.75.75 0 01-1.08 0L5.21 8.27a.75.75 0 01.02-1.06z" clip-rule="evenodd" /></svg>
        </button>
      </div>

      <!-- Filter Rows -->
      <div
        id="filters"
        class="collapsed space-y-2 flex flex-col items-stretch max-w-4xl mx-auto md:mt-0 mt-2"
      >
        <div id="day-filters" class="filter-row"></div>
        <div id="degree-filters" class="filter-row"></div>
        <div id="program-filters" class="filter-row"></div>
        <div id="semester-filters" class="filter-row"></div>
        <div id="section-filters" class="filter-row"></div>
        <div class="pt-2 flex justify-center">
          <button id="clear-filters" class="clear-btn">Clear Filters</button>
        </div>
      </div>
    </div>

    <!-- Stats -->
    <div id="stats" class="text-xs text-gray-500 mb-2"></div>

    <!-- Results (Unified Table) -->
    <div
      class="bg-gray-900/60 backdrop-blur rounded-xl border border-gray-800 shadow-xl overflow-hidden"
    >
      <div class="max-h-[60vh] overflow-auto" id="results-wrapper">
        <table class="min-w-full text-sm table-fixed align-top">
          <colgroup>
            <col style="width: 11rem;" />
            <col style="width: 20rem;" />
            <col style="width: 7rem;" />
            <col style="width: 18rem;" />
            <col style="width: 14rem;" />
            <col style="width: 8rem;" />
            <col style="width: 7rem;" />
            <col style="width: 14rem;" />
          </colgroup>
          <thead
            class="bg-gray-800/70 text-gray-300 sticky top-0 z-10 backdrop-blur supports-[backdrop-filter]:bg-gray-800/60"
          >
            <tr class="text-left">
              <th class="px-3 py-2 font-medium">Time</th>
              <th class="px-3 py-2 font-medium">Course</th>
              <th class="px-3 py-2 font-medium">Code</th>
              <th class="px-3 py-2 font-medium">Program / Semester</th>
              <th class="px-3 py-2 font-medium">Teacher</th>
              <th class="px-3 py-2 font-medium">Room</th>
              <th class="px-3 py-2 font-medium">Day</th>
              <th class="px-3 py-2 font-medium">Flags</th>
            </tr>
          </thead>
          <tbody id="results" class="divide-y divide-gray-800"></tbody>
        </table>
      </div>
    </div>
    <!-- Mobile Simplified Results -->
  <div id="mobile-results" class="mt-6 space-y-3"></div>
  </main>
  <Footer />
</Layout>

<script>
  // --- Type Definitions ---
  interface RawEntry {
    combined_class: boolean | null;
    course_title: string | null;
    course_code: string | null;
    program_line: string | null;
    degree: string | null;
    program: string | null;
    section: string | null;
    session: string | null;
    semester: number | null;
    teacher_name: string | null;
    start_time: string | null;
    end_time: string | null;
    practical: boolean | null;
    raw_lines?: string[];
  }
  interface FlatRecord {
    day: string;
    room: string;
    course_title: string;
    course_code: string;
    program_line: string;
    degree: string;
    program: string;
    section: string;
    session: string;
    semester: number | null;
    teacher_name: string;
    combined_class: boolean | null;
    start_time: string;
    end_time: string;
    practical: boolean | null | undefined;
    raw: string[];
  }

  // Element refs (narrowed to specific types)
  const datasetSelect = document.getElementById(
    'dataset'
  ) as HTMLSelectElement | null;
  const searchInput = document.getElementById(
    'search'
  ) as HTMLInputElement | null;
  const resultsEl = document.getElementById(
    'results'
  ) as HTMLTableSectionElement | null;
  const statsEl = document.getElementById('stats') as HTMLElement | null;
  const mobileResultsEl = document.getElementById('mobile-results') as HTMLElement | null;
  const simplifiedToggle = document.getElementById('toggle-simplified') as HTMLButtonElement | null;
  const dayFiltersEl = document.getElementById(
    'day-filters'
  ) as HTMLElement | null;
  const semesterFiltersEl = document.getElementById(
    'semester-filters'
  ) as HTMLElement | null;
  const programFiltersEl = document.getElementById(
    'program-filters'
  ) as HTMLElement | null;
  const sectionFiltersEl = document.getElementById(
    'section-filters'
  ) as HTMLElement | null;
  const degreeFiltersEl = document.getElementById(
    'degree-filters'
  ) as HTMLElement | null;

  let rawData: Record<string, any> = {}; // initial nested data
  let flat: FlatRecord[] = []; // flattened records array
  const activeDays = new Set<string>();
  const activeSemesters = new Set<string>();
  const activePrograms = new Set<string>();
  const activeSections = new Set<string>();
  const activeDegrees = new Set<string>();

  const DAY_ORDER = [
    'Monday',
    'Tuesday',
    'Wednesday',
    'Thursday',
    'Friday',
    'Saturday',
    'Sunday',
  ];

  function to12(time24: string | null | undefined): string {
    if (!time24) return '';
    const [hStr, mStr] = time24.split(':');
    const h = parseInt(hStr, 10);
    const m = parseInt(mStr, 10);
    if (Number.isNaN(h) || Number.isNaN(m)) return time24; // fallback
    const ampm = h >= 12 ? 'PM' : 'AM';
    const hour12 = ((h + 11) % 12) + 1;
    return `${hour12}:${m.toString().padStart(2, '0')} ${ampm}`;
  }

  function makeButton(
    label: string,
    container: HTMLElement | null,
    set: Set<string>,
    displayLabel?: string
  ): void {
    if (!container) return;
    const btn = document.createElement('button');
    btn.type = 'button';
    // Use displayLabel (e.g., 'Semester 4') for text while keeping raw label for filter set
    btn.textContent = displayLabel || label;
    btn.dataset.filterValue = label;
    const base = 'chip';
    const inactive = 'chip-inactive';
    // contextual color accent based on row type
    let accent = '';
    if (container.id === 'day-filters') accent = 'chip-accent-day';
    else if (container.id === 'degree-filters') accent = 'chip-accent-degree';
    else if (container.id === 'program-filters') accent = 'chip-accent-program';
    else if (container.id === 'semester-filters')
      accent = 'chip-accent-semester';
    else if (container.id === 'section-filters') accent = 'chip-accent-section';
    const activeClasses = ['chip-active'];
    const isActive = set.has(label);
    btn.className =
      base +
      ' ' +
      accent +
      ' ' +
      (isActive ? activeClasses.join(' ') : inactive);
    btn.addEventListener('click', () => {
      const key = btn.dataset.filterValue || label;
      if (set.has(key)) set.delete(key);
      else set.add(key);
      const active = set.has(key);
      if (active) {
        activeClasses.forEach((c) => btn.classList.add(c));
        btn.classList.remove('chip-inactive');
      } else {
        activeClasses.forEach((c) => btn.classList.remove(c));
        btn.classList.add('chip-inactive');
      }
        render(); updateActiveCountBadge();
    });
    container.appendChild(btn);
  }

  async function loadDataset(name: string): Promise<void> {
    if (resultsEl)
      resultsEl.innerHTML =
        '<tr><td class="px-4 py-6 text-center text-gray-400" colspan="8">Loading...</td></tr>';
    try {
      const res = await fetch(`/parsed/${name}`);
      rawData = await res.json();
      flatten();
        buildFilters(); render(); updateActiveCountBadge();
    } catch (err) {
      if (resultsEl)
        resultsEl.innerHTML = `<tr><td class='px-4 py-6 text-center text-red-400' colspan='8'>Failed to load dataset: ${err}</td></tr>`;
    }
  }

  function flatten(): void {
    flat = [];
    Object.entries(rawData).forEach(([day, rooms]) => {
      if (typeof rooms !== 'object' || rooms === null) return;
      Object.entries(rooms as Record<string, RawEntry[] | any>).forEach(
        ([room, entries]) => {
          if (!Array.isArray(entries)) return;
          (entries as RawEntry[]).forEach((entry) => {
            if (!entry) return;
            const rec: FlatRecord = {
              day,
              room,
              course_title: entry.course_title || '',
              course_code: entry.course_code || '',
              program_line: entry.program_line || '',
              degree: entry.degree || '',
              program: entry.program || '',
              section: entry.section || '',
              session: entry.session || '',
              semester: entry.semester ?? null,
              teacher_name: entry.teacher_name || '',
              combined_class: entry.combined_class ?? null,
              start_time: entry.start_time || '',
              end_time: entry.end_time || '',
              practical:
                (entry.practical ?? false) &&
                (entry.raw_lines?.some((l: string) => /practical/i.test(l)) ||
                  entry.practical),
              raw: entry.raw_lines || [],
            };
            const meaningful = rec.course_title && rec.course_title !== '';
            if (meaningful || rec.teacher_name || rec.program_line)
              flat.push(rec);
          });
        }
      );
    });
  }

  function buildFilters(): void {
    if (dayFiltersEl) dayFiltersEl.innerHTML = '';
    if (degreeFiltersEl) degreeFiltersEl.innerHTML = '';
    if (programFiltersEl) programFiltersEl.innerHTML = '';
    if (semesterFiltersEl) semesterFiltersEl.innerHTML = '';
    if (sectionFiltersEl) sectionFiltersEl.innerHTML = '';

    const days = [...new Set(flat.map((r) => r.day))].sort(
      (a, b) => DAY_ORDER.indexOf(a) - DAY_ORDER.indexOf(b)
    );
    const semesters = [
      ...new Set(flat.map((r) => r.semester).filter((v) => v != null)),
    ].sort((a, b) => (Number(a) as number) - (Number(b) as number));
    const programs = [
      ...new Set(flat.map((r) => r.program).filter(Boolean)),
    ].sort();
    const degrees = [
      ...new Set(flat.map((r) => r.degree).filter(Boolean)),
    ].sort();

    days.forEach((d) => makeButton(d, dayFiltersEl, activeDays));
    // Degrees row (explicit BS, MS, PhD ordering if present)
    const DEG_ORDER = ['BS', 'MS', 'PhD'];
    const orderedDegrees = degrees.sort((a, b) => {
      const ai = DEG_ORDER.indexOf(a.toUpperCase());
      const bi = DEG_ORDER.indexOf(b.toUpperCase());
      if (ai === -1 && bi === -1) return a.localeCompare(b);
      if (ai === -1) return 1;
      if (bi === -1) return -1;
      return ai - bi;
    });
    orderedDegrees.forEach((dg) =>
      makeButton(dg, degreeFiltersEl, activeDegrees)
    );
    programs.forEach((p) => makeButton(p, programFiltersEl, activePrograms));
    semesters.forEach((s) =>
      makeButton(String(s), semesterFiltersEl, activeSemesters, `Semester ${s}`)
    );
    // Sections: only show if multiple distinct non-empty sections exist
    const sections = [
      ...new Set(flat.map((r) => r.section).filter(Boolean)),
    ].sort();
    if (sections.length > 1) {
      sections.forEach((sec) =>
        makeButton(sec, sectionFiltersEl, activeSections)
      );
    }
  }

  function recordMatches(rec: FlatRecord, q: string): boolean {
    if (!q) return true;
    const hay = [
      rec.course_title,
      rec.course_code,
      rec.program_line,
      rec.degree,
      rec.program,
      rec.section,
      rec.session,
      rec.teacher_name,
      rec.room,
      rec.day,
      String(rec.semester || ''),
    ]
      .join(' ')
      .toLowerCase();
    return q.split(/\s+/).every((term: string) => hay.includes(term));
  }

  function applyFilters(list: FlatRecord[]): FlatRecord[] {
    return list.filter((r: FlatRecord) => {
      if (activeDays.size && !activeDays.has(r.day)) return false;
      if (activeSemesters.size && !activeSemesters.has(String(r.semester)))
        return false;
      if (activePrograms.size && !activePrograms.has(r.program)) return false;
      if (activeSections.size && !activeSections.has(r.section)) return false;
      if (activeDegrees.size && !activeDegrees.has(r.degree)) return false;
      return true;
    });
  }

  let sortKey: keyof FlatRecord | 'day' = 'day';
  let sortDir: 1 | -1 = 1;
  let debounceTimer: number | null = null;

  function headerSortHandler(th: HTMLElement, key: keyof FlatRecord | 'day') {
    th.addEventListener('click', () => {
      if (sortKey === key) {
        sortDir = sortDir === 1 ? -1 : 1;
      } else {
        sortKey = key;
        sortDir = 1;
      }
      render();
    });
  }

  function attachHeaderSorting() {
    document.querySelectorAll('thead th').forEach((th) => {
      const key = (th as HTMLElement).dataset.sort as
        | keyof FlatRecord
        | 'day'
        | undefined;
      if (key) {
        headerSortHandler(th as HTMLElement, key);
      }
    });
  }

  function syncURL() {
    const params = new URLSearchParams();
    if (datasetSelect?.value) params.set('ds', datasetSelect.value);
    const q = searchInput?.value?.trim();
    if (q) params.set('q', q);
    if (activeDays.size) params.set('days', [...activeDays].join('|'));
    if (activeSemesters.size) params.set('sem', [...activeSemesters].join('|'));
    if (activePrograms.size) params.set('prog', [...activePrograms].join('|'));
    if (activeSections.size) params.set('sec', [...activeSections].join('|'));
    if (activeDegrees.size) params.set('deg', [...activeDegrees].join('|'));
    if (sortKey) params.set('sort', sortKey);
    if (sortDir === -1) params.set('dir', 'desc');
    if (document.documentElement.classList.contains('simplified')) params.set('mode', 'simple');
    // grouping removed
    const newUrl = `${location.pathname}?${params.toString()}`;
    history.replaceState(null, '', newUrl);
  }

  function loadFromURL() {
    const params = new URLSearchParams(location.search);
    const ds = params.get('ds');
    if (ds && datasetSelect) datasetSelect.value = ds;
    const q = params.get('q');
    if (q && searchInput) searchInput.value = q;
    const days = params.get('days');
    if (days) days.split('|').forEach((d) => activeDays.add(d));
    const sem = params.get('sem');
    if (sem) sem.split('|').forEach((s) => activeSemesters.add(s));
    const prog = params.get('prog');
    if (prog) prog.split('|').forEach((p) => activePrograms.add(p));
    const sec = params.get('sec');
    if (sec) sec.split('|').forEach((s) => activeSections.add(s));
    const deg = params.get('deg');
    if (deg) deg.split('|').forEach((d) => activeDegrees.add(d));
    const sk = params.get('sort') as keyof FlatRecord | 'day' | null;
    if (sk) sortKey = sk;
    const sd = params.get('dir');
    if (sd === 'desc') sortDir = -1;
    const mode = params.get('mode');
    if (mode === 'simple' || !mode) {
      // Default to simplified when param missing or explicitly simple
      document.documentElement.classList.add('simplified');
      if (simplifiedToggle){
        simplifiedToggle.classList.add('active');
        simplifiedToggle.setAttribute('aria-pressed','true');
      }
      // If param was missing, reflect it in URL after initial render
    }
    // grouping removed
  }

  function render(): void {
    const q = (searchInput?.value || '').trim().toLowerCase();
    const list = applyFilters(flat).filter((r: FlatRecord) =>
      recordMatches(r, q)
    );
    list.sort((a: FlatRecord, b: FlatRecord) => {
      // Sort priority: chosen sortKey then fallback original ordering logic
      const primary = (() => {
        if (sortKey === 'day')
          return DAY_ORDER.indexOf(a.day) - DAY_ORDER.indexOf(b.day);
        const av = (a as any)[sortKey];
        const bv = (b as any)[sortKey];
        if (typeof av === 'number' && typeof bv === 'number') return av - bv;
        return String(av).localeCompare(String(bv));
      })();
      if (primary !== 0) return primary * sortDir;
      const dayDiff = DAY_ORDER.indexOf(a.day) - DAY_ORDER.indexOf(b.day);
      if (dayDiff !== 0) return dayDiff;
      const tA = a.start_time
        ? parseInt(a.start_time.slice(0, 2)) * 60 +
          parseInt(a.start_time.slice(3, 5))
        : 0;
      const tB = b.start_time
        ? parseInt(b.start_time.slice(0, 2)) * 60 +
          parseInt(b.start_time.slice(3, 5))
        : 0;
      if (tA !== tB) return tA - tB;
      if (a.room < b.room) return -1;
      if (a.room > b.room) return 1;
      return 0;
    });

    if (statsEl) {
      const distinctTeachers = new Set(
        list.map((r) => r.teacher_name).filter(Boolean)
      );
      const distinctPrograms = new Set(
        list.map((r) => r.program).filter(Boolean)
      );
      statsEl.textContent = `${list.length} classes shown (of ${flat.length} loaded) • ${distinctTeachers.size} teachers • ${distinctPrograms.size} programs`;
    }

    if (!list.length) {
      if (resultsEl)
        resultsEl.innerHTML =
          '<tr><td colspan="8" class="px-4 py-6 text-center text-gray-400">No matches.</td></tr>';
      if (mobileResultsEl)
        mobileResultsEl.innerHTML = `<div class="text-center text-gray-400 text-sm py-4">No matches.</div>`;
      return;
    }

    const rows = list
      .map((r: FlatRecord) => {
        const flags: string[] = [];
        if (r.combined_class) flags.push('Combined');
        if (r.practical) flags.push('Practical');
        return `<tr class="hover:bg-gray-800/40">
          <td data-label="Time" class="px-3 py-2 whitespace-nowrap text-gray-300">${to12(r.start_time)}${r.end_time ? ` - ${to12(r.end_time)}` : ''}</td>
          <td data-label="Course" class="px-3 py-2 font-medium text-white">${r.course_title || '<span class="text-gray-500">TBA</span>'}</td>
          <td data-label="Code" class="px-3 py-2 text-gray-400">${r.course_code || ''}</td>
          <td data-label="Program / Semester" class="px-3 py-2 text-gray-300">
            <div class="text-xs text-gray-400">${r.program || ''} ${r.degree ? '(' + r.degree + ')' : ''}</div>
            <div class="text-xs">Semester ${r.semester ?? ''} ${r.section ? '• ' + r.section : ''}</div>
          </td>
          <td data-label="Teacher" class="px-3 py-2 text-gray-300">${r.teacher_name || ''}</td>
          <td data-label="Room" class="px-3 py-2 text-gray-400">${r.room}</td>
          <td data-label="Day" class="px-3 py-2 text-gray-400">${r.day}</td>
          <td data-label="Flags" class="px-3 py-2 text-xs">${flags.map((f) => `<span class='inline-block bg-blue-600/30 border border-blue-500/40 text-blue-300 rounded-full px-2 py-0.5 mr-1 mb-1'>${f}</span>`).join('')}</td>
        </tr>`;
      })
      .join('');
    if (resultsEl) resultsEl.innerHTML = rows;

    // --- Mobile simplified cards ---
    if (mobileResultsEl) {
      const mobileCards = list
        .map((r: FlatRecord) => {
          const classBase = buildClassShort(r); // excludes semester
          const semSuffix = r.semester != null ? ` (Sem #${r.semester})` : '';
          const classLine = classBase + semSuffix;
          const timeStr = `${to12(r.start_time)}${r.end_time ? ` - ${to12(r.end_time)}` : ''}`;
          return `<div class=\"mcard\">
            <div class=\"mcard-meta\">
              <div class=\"mcard-meta-day\">${r.day}</div>
              <div class=\"mcard-meta-time\">${timeStr}</div>
            </div>
            <div class=\"mcard-course\">${r.course_title || '<span class=\\"text-gray-500\\">TBA</span>'}</div>
            <div class=\"mcard-class\">${classLine}</div>
            <div class=\"mcard-teacher\">${r.teacher_name || ''}</div>
            <div class=\"mcard-room\">${r.room || ''}</div>
          </div>`;
        })
        .join('');
      mobileResultsEl.innerHTML = mobileCards;
    }
    syncURL();
      updateActiveCountBadge();
  }

  function clearAll() {
    activeDays.clear();
    activeSemesters.clear();
    activePrograms.clear();
    activeSections.clear();
    activeDegrees.clear();
    if (searchInput) searchInput.value = '';
    buildFilters();
    render();
  }

  if (datasetSelect)
    datasetSelect.addEventListener(
      'change',
      () => datasetSelect && loadDataset(datasetSelect.value)
    );
  if (searchInput)
    searchInput.addEventListener('input', () => {
      if (debounceTimer) window.clearTimeout(debounceTimer);
      debounceTimer = window.setTimeout(() => {
        render();
      }, 60);
    });

  document.getElementById('clear-filters')?.addEventListener('click', clearAll);
  loadFromURL();

  if (datasetSelect instanceof HTMLSelectElement) {
    loadDataset(datasetSelect.value).then(() => {
      attachHeaderSorting();
    });
  }

  // --- Helpers for mobile class short form ---
  function abbreviateProgram(program: string): string {
    if (!program) return '';
    // Use capital letters of each word (Computer Science -> CS)
    const words = program.split(/\s+/).filter(Boolean);
    const abbr = words.map((w) => w[0]).join('').toUpperCase();
    // Fallback if single letter
    if (abbr.length <= 1 && words[0]) return words[0].slice(0, 3).toUpperCase();
    return abbr;
  }
  // Keep full section text (no abbreviation) per updated requirement
  function shortenSection(section: string): string { return section || ''; }
  function buildClassShort(r: FlatRecord): string {
    const parts: string[] = [];
    if (r.degree) parts.push(r.degree.toUpperCase());
    const progAbbr = abbreviateProgram(r.program);
    if (progAbbr) parts.push(progAbbr);
    const sectionFull = shortenSection(r.section);
    if (sectionFull) parts.push(sectionFull); // e.g., Regular 1, Self Support 2
    return parts.join(' ');
  }

  // --- Mobile Filter Toggle Logic ---
  const mobileToggle = document.getElementById('mobile-filter-toggle');
  const filtersContainer = document.getElementById('filters');
  const mobileCount = document.getElementById('mobile-filter-count');

  function countActiveFilters(): number {
    return activeDays.size + activeSemesters.size + activePrograms.size + activeSections.size + activeDegrees.size;
  }
  function updateActiveCountBadge(){
    if(!mobileCount) return;
    const c = countActiveFilters();
    mobileCount.textContent = c ? String(c) : '';
    mobileCount.style.display = c ? 'inline-flex' : 'none';
  }
  function renderWithMobile(){
    render();
    updateActiveCountBadge();
  }
  updateActiveCountBadge();
  // Replace certain initial calls
  // (Subsequent event handlers now call renderWithMobile instead of render)

  // Rewire event handlers that previously invoked render directly
  if(searchInput){
    searchInput.removeEventListener('input', ()=>{}); // no-op safeguard
  }
  // Override existing listeners by adding new ones (render inside already debounced input handler references)
  // Simpler: monkey patch global references used inside earlier code paths
  // We'll redefine a local helper to call renderWithMobile after filters build
  // count badge already updated after render/build invocations

  mobileToggle?.addEventListener('click', () => {
    if(!filtersContainer) return;
    const collapsed = filtersContainer.classList.toggle('collapsed');
    mobileToggle.classList.toggle('active', !collapsed);
  });
  // Initialize toggle button active state (collapsed by default => inactive)
  if(filtersContainer?.classList.contains('collapsed')) {
    mobileToggle?.classList.remove('active');
  }
  // Auto-expand filters for mid-width tablets (>=768 && <=820)
  function autoExpandFiltersForTablet(){
    if(!filtersContainer) return;
    const w = window.innerWidth;
    if(w >= 768 && w <= 820){
      if(filtersContainer.classList.contains('collapsed')){
        filtersContainer.classList.remove('collapsed');
        mobileToggle?.classList.add('active');
      }
    }
  }
  autoExpandFiltersForTablet();
  window.addEventListener('resize', () => {
    autoExpandFiltersForTablet();
  });

  // Simplified toggle (desktop + responsive)
  simplifiedToggle?.addEventListener('click', () => {
    document.documentElement.classList.toggle('simplified');
    const active = document.documentElement.classList.contains('simplified');
    simplifiedToggle.classList.toggle('active', active);
    simplifiedToggle.setAttribute('aria-pressed', active ? 'true' : 'false');
    // When simplified on desktop, hide table and show cards; we already render both.
    render();
  });
</script>

<style is:global>
  /* Optional minor tweaks */
  #results-wrapper table {
    font-variant-numeric: tabular-nums;
  }
  .filter-row {
    display: flex;
    flex-wrap: wrap;
    gap: 0.5rem;
    justify-content: center;
    padding: 2px 4px;
  }
  .chip {
    position: relative;
    cursor: pointer;
    user-select: none;
    padding: 0.42rem 0.85rem;
    line-height: 1;
    font-size: 0.7rem;
    letter-spacing: 0.025em;
    border: 1px solid var(--chip-border, #2e3a45);
    border-radius: 9999px;
    background: var(--chip-bg, #1d242b);
    color: var(--chip-fg, #d5dde3);
    transition:
      background 0.16s ease,
      color 0.16s ease,
      border-color 0.16s ease,
      box-shadow 0.16s ease;
  }
  .chip:focus-visible {
    outline: 2px solid var(--chip-accent, #3b82f6);
    outline-offset: 1px;
  }
  .chip-inactive {
    opacity: 0.95;
  }
  .chip-inactive:hover {
    background: var(--chip-bg-hover, #232d36);
  }
  .chip-active {
    background: var(--chip-bg-active, #2d3741);
    color: var(--chip-fg-active, #ffffff);
    border-color: var(--chip-accent, #3b82f6);
    box-shadow:
      0 0 0 1px var(--chip-accent, #3b82f6),
      0 2px 6px -2px rgba(0, 0, 0, 0.5);
  }
  .chip-active:hover {
    background: var(--chip-bg-active-hover, #31404b);
  }
  /* Accent palettes (solid, subtle) */
  /* Brighter, higher-chroma translucent palettes */
  .chip-accent-day {
    --chip-accent: #58b8ff;
    --chip-border: var(--chip-accent);
    --chip-bg: rgba(88, 184, 255, 0.18);
    --chip-bg-hover: rgba(88, 184, 255, 0.28);
    --chip-bg-active: rgba(88, 184, 255, 0.45);
    --chip-bg-active-hover: rgba(88, 184, 255, 0.6);
  }
  .chip-accent-degree {
    --chip-accent: #25dfff;
    --chip-border: var(--chip-accent);
    --chip-bg: rgba(37, 223, 255, 0.18);
    --chip-bg-hover: rgba(37, 223, 255, 0.28);
    --chip-bg-active: rgba(37, 223, 255, 0.45);
    --chip-bg-active-hover: rgba(37, 223, 255, 0.6);
  }
  .chip-accent-program {
    --chip-accent: #a38bff;
    --chip-border: var(--chip-accent);
    --chip-bg: rgba(163, 139, 255, 0.18);
    --chip-bg-hover: rgba(163, 139, 255, 0.28);
    --chip-bg-active: rgba(163, 139, 255, 0.45);
    --chip-bg-active-hover: rgba(163, 139, 255, 0.6);
  }
  .chip-accent-semester {
    --chip-accent: #27f5b6;
    --chip-border: var(--chip-accent);
    --chip-bg: rgba(39, 245, 182, 0.18);
    --chip-bg-hover: rgba(39, 245, 182, 0.28);
    --chip-bg-active: rgba(39, 245, 182, 0.45);
    --chip-bg-active-hover: rgba(39, 245, 182, 0.6);
  }
  .chip-accent-section {
    --chip-accent: #ffc766;
    --chip-border: var(--chip-accent);
    --chip-bg: rgba(255, 199, 102, 0.18);
    --chip-bg-hover: rgba(255, 199, 102, 0.28);
    --chip-bg-active: rgba(255, 199, 102, 0.45);
    --chip-bg-active-hover: rgba(255, 199, 102, 0.6);
  }
  .clear-btn {
    font-size: 0.7rem;
    letter-spacing: 0.05em;
    background: #1f2933;
    color: #cbd5e1;
    border: 1px solid #334155;
    padding: 0.5rem 1rem;
    border-radius: 0.55rem;
    transition: 0.18s;
  }
  .clear-btn:hover {
    background: #dc2626;
    color: #fff;
    border-color: #ef4444;
  }
  #filters {
    --c-border: #2e3b47;
  }
  /* Mobile responsive adjustments */
  @media (max-width: 820px) {
    #results-wrapper { display:none; }
  #mobile-results .mcard { position:relative; background:#111a22; border:1px solid #27323c; border-radius:0.9rem; padding:.85rem .9rem .75rem .9rem; box-shadow:0 4px 10px -4px rgba(0,0,0,0.55); overflow:hidden; text-align:left; }
    #mobile-results .mcard::before { content:""; position:absolute; inset:0 0 auto 0; height:3px; background:linear-gradient(90deg,#58b8ff,#a38bff,#27f5b6); opacity:.9; }
    #mobile-results .mcard-meta { position:absolute; top:.55rem; right:.65rem; text-align:right; display:flex; flex-direction:column; align-items:flex-end; gap:.2rem; font-size:.6rem; line-height:1.1; }
    #mobile-results .mcard-meta-day { font-weight:600; letter-spacing:.06em; text-transform:uppercase; color:#94a3b8; font-size:.55rem; }
    #mobile-results .mcard-meta-time { font-weight:600; color:#7dd3fc; font-size:.6rem; }
  #mobile-results .mcard-course { font-size:.9rem; font-weight:600; color:#f1f5f9; line-height:1.15; margin-bottom:.35rem; padding-right:5.2rem; }
  #mobile-results .mcard-meta { min-width:4.1rem; }
    #mobile-results .mcard-class { font-size:.7rem; letter-spacing:.07em; text-transform:uppercase; font-weight:600; color:#7dd3fc; margin-bottom:.4rem; }
    #mobile-results .mcard-teacher { font-size:.75rem; color:#cbd5e1; margin-bottom:.3rem; }
    #mobile-results .mcard-room { font-size:.65rem; letter-spacing:.05em; color:#94a3b8; margin-top:.25rem; text-transform:uppercase; }
    #mobile-results .mcard + .mcard { margin-top:.9rem; }
  }
  @media (min-width: 821px) {
    #mobile-results { display:none; }
  }
  /* Simplified mode (applies regardless of width) */
  :root.simplified #results-wrapper { display:none !important; }
  :root.simplified #mobile-results { display:block !important; }
  :root.simplified #mobile-results .mcard { max-width:760px; margin-left:auto; margin-right:auto; }
  /* Desktop simplified mode needs card styling (mobile styles live in max-width media query) */
  @media (min-width: 821px) {
    :root.simplified #mobile-results .mcard { position:relative; background:#111a22; border:1px solid #27323c; border-radius:0.9rem; padding:.95rem 1rem .85rem 1rem; box-shadow:0 6px 14px -6px rgba(0,0,0,0.55); overflow:hidden; text-align:left; }
    :root.simplified #mobile-results .mcard::before { content:""; position:absolute; inset:0 0 auto 0; height:3px; background:linear-gradient(90deg,#58b8ff,#a38bff,#27f5b6); opacity:.9; }
    :root.simplified #mobile-results .mcard-meta { position:absolute; top:.6rem; right:.8rem; text-align:right; display:flex; flex-direction:column; align-items:flex-end; gap:.25rem; font-size:.65rem; line-height:1.1; }
    :root.simplified #mobile-results .mcard-meta-day { font-weight:600; letter-spacing:.065em; text-transform:uppercase; color:#94a3b8; font-size:.6rem; }
    :root.simplified #mobile-results .mcard-meta-time { font-weight:600; color:#7dd3fc; font-size:.7rem; }
  :root.simplified #mobile-results .mcard-course { font-size:1rem; font-weight:600; color:#f1f5f9; line-height:1.15; margin-bottom:.4rem; padding-right:6rem; }
  :root.simplified #mobile-results .mcard-meta { min-width:4.6rem; }
    :root.simplified #mobile-results .mcard-class { font-size:.72rem; letter-spacing:.08em; text-transform:uppercase; font-weight:600; color:#7dd3fc; margin-bottom:.45rem; }
    :root.simplified #mobile-results .mcard-teacher { font-size:.8rem; color:#cbd5e1; margin-bottom:.35rem; }
    :root.simplified #mobile-results .mcard-room { font-size:.66rem; letter-spacing:.05em; color:#94a3b8; margin-top:.3rem; text-transform:uppercase; }
    :root.simplified #mobile-results .mcard + .mcard { margin-top:1rem; }
  }
  /* Removed active background/border styling per request */
  #toggle-simplified.active { background:transparent; border-color:transparent; box-shadow:none; }
  /* Simplified switch styles */
  .simplified-switch { position:relative; display:inline-flex; align-items:center; gap:.6rem; background:transparent; border:none; cursor:pointer; font-size:.7rem; font-weight:600; letter-spacing:.05em; color:#cbd5e1; padding:.25rem .25rem .25rem 0; }
  .simplified-switch .switch-label { font-size:.65rem; text-transform:uppercase; opacity:.75; transition:color .2s,opacity .2s; }
  .simplified-switch .switch-track { width:2.6rem; height:1.15rem; background:#1e2934; border:1px solid #334252; border-radius:999px; position:relative; transition:background .25s,border-color .25s; box-shadow:inset 0 0 0 1px rgba(255,255,255,0.03); }
  .simplified-switch .switch-thumb { position:absolute; left:.15rem; top:50%; transform:translateY(-50%); width:.85rem; height:.85rem; background:linear-gradient(135deg,#4ea3ff,#8b5cf6); border-radius:50%; box-shadow:0 2px 4px -1px rgba(0,0,0,.6),0 0 0 1px rgba(255,255,255,.1); transition:transform .28s cubic-bezier(.4,.2,.2,1), background .3s; }
  /* Keep thumb movement only; stop changing track bg/border when active */
  .simplified-switch.active .switch-track { background:#1e2934; border-color:#334252; }
  .simplified-switch.active .switch-thumb { transform:translate(1.45rem,-50%); background:linear-gradient(135deg,#34d399,#10b981); }
  .simplified-switch:focus-visible { outline:2px solid #3b82f6; outline-offset:3px; border-radius:6px; }
  .simplified-switch:hover .switch-track { border-color:#4b6074; }
  .simplified-switch.active .switch-label { color:#a7f3d0; opacity:1; }
  @media (max-width: 820px){
    #simplified-toggle-row { display:none; }
  }
  @media (max-width: 820px) {
  .filter-row { justify-content:center; gap:.4rem; }
    #filters { max-width:100%; }
    #filters.collapsed { display:none; }
    #mobile-filter-toggle.active #mobile-filter-caret { transform:rotate(180deg); }
  }
  @media (min-width: 821px) {
    #filter-toggle-wrapper { display:none; }
  }
  /* Smooth collapse animation (height auto workaround is complex; using simple show/hide) */
  #mobile-filter-toggle { transition:background .2s,border-color .2s; }
  #mobile-filter-toggle.active { background:#1e2936; border-color:#4b5563; }
</style>
